// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: vita/gainsharing/tx.proto

package gainsharing

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_UpdateParams_FullMethodName         = "/vita.gainsharing.Msg/UpdateParams"
	Msg_CreateMechanism_FullMethodName      = "/vita.gainsharing.Msg/CreateMechanism"
	Msg_UpdateMechanism_FullMethodName      = "/vita.gainsharing.Msg/UpdateMechanism"
	Msg_DeleteMechanism_FullMethodName      = "/vita.gainsharing.Msg/DeleteMechanism"
	Msg_CreatePerformance_FullMethodName    = "/vita.gainsharing.Msg/CreatePerformance"
	Msg_UpdatePerformance_FullMethodName    = "/vita.gainsharing.Msg/UpdatePerformance"
	Msg_DeletePerformance_FullMethodName    = "/vita.gainsharing.Msg/DeletePerformance"
	Msg_CalculatePerformance_FullMethodName = "/vita.gainsharing.Msg/CalculatePerformance"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	CreateMechanism(ctx context.Context, in *MsgCreateMechanism, opts ...grpc.CallOption) (*MsgCreateMechanismResponse, error)
	UpdateMechanism(ctx context.Context, in *MsgUpdateMechanism, opts ...grpc.CallOption) (*MsgUpdateMechanismResponse, error)
	DeleteMechanism(ctx context.Context, in *MsgDeleteMechanism, opts ...grpc.CallOption) (*MsgDeleteMechanismResponse, error)
	CreatePerformance(ctx context.Context, in *MsgCreatePerformance, opts ...grpc.CallOption) (*MsgCreatePerformanceResponse, error)
	UpdatePerformance(ctx context.Context, in *MsgUpdatePerformance, opts ...grpc.CallOption) (*MsgUpdatePerformanceResponse, error)
	DeletePerformance(ctx context.Context, in *MsgDeletePerformance, opts ...grpc.CallOption) (*MsgDeletePerformanceResponse, error)
	CalculatePerformance(ctx context.Context, in *MsgCalculatePerformance, opts ...grpc.CallOption) (*MsgCalculatePerformanceResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateMechanism(ctx context.Context, in *MsgCreateMechanism, opts ...grpc.CallOption) (*MsgCreateMechanismResponse, error) {
	out := new(MsgCreateMechanismResponse)
	err := c.cc.Invoke(ctx, Msg_CreateMechanism_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateMechanism(ctx context.Context, in *MsgUpdateMechanism, opts ...grpc.CallOption) (*MsgUpdateMechanismResponse, error) {
	out := new(MsgUpdateMechanismResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateMechanism_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteMechanism(ctx context.Context, in *MsgDeleteMechanism, opts ...grpc.CallOption) (*MsgDeleteMechanismResponse, error) {
	out := new(MsgDeleteMechanismResponse)
	err := c.cc.Invoke(ctx, Msg_DeleteMechanism_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreatePerformance(ctx context.Context, in *MsgCreatePerformance, opts ...grpc.CallOption) (*MsgCreatePerformanceResponse, error) {
	out := new(MsgCreatePerformanceResponse)
	err := c.cc.Invoke(ctx, Msg_CreatePerformance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdatePerformance(ctx context.Context, in *MsgUpdatePerformance, opts ...grpc.CallOption) (*MsgUpdatePerformanceResponse, error) {
	out := new(MsgUpdatePerformanceResponse)
	err := c.cc.Invoke(ctx, Msg_UpdatePerformance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeletePerformance(ctx context.Context, in *MsgDeletePerformance, opts ...grpc.CallOption) (*MsgDeletePerformanceResponse, error) {
	out := new(MsgDeletePerformanceResponse)
	err := c.cc.Invoke(ctx, Msg_DeletePerformance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CalculatePerformance(ctx context.Context, in *MsgCalculatePerformance, opts ...grpc.CallOption) (*MsgCalculatePerformanceResponse, error) {
	out := new(MsgCalculatePerformanceResponse)
	err := c.cc.Invoke(ctx, Msg_CalculatePerformance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	CreateMechanism(context.Context, *MsgCreateMechanism) (*MsgCreateMechanismResponse, error)
	UpdateMechanism(context.Context, *MsgUpdateMechanism) (*MsgUpdateMechanismResponse, error)
	DeleteMechanism(context.Context, *MsgDeleteMechanism) (*MsgDeleteMechanismResponse, error)
	CreatePerformance(context.Context, *MsgCreatePerformance) (*MsgCreatePerformanceResponse, error)
	UpdatePerformance(context.Context, *MsgUpdatePerformance) (*MsgUpdatePerformanceResponse, error)
	DeletePerformance(context.Context, *MsgDeletePerformance) (*MsgDeletePerformanceResponse, error)
	CalculatePerformance(context.Context, *MsgCalculatePerformance) (*MsgCalculatePerformanceResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) CreateMechanism(context.Context, *MsgCreateMechanism) (*MsgCreateMechanismResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMechanism not implemented")
}
func (UnimplementedMsgServer) UpdateMechanism(context.Context, *MsgUpdateMechanism) (*MsgUpdateMechanismResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMechanism not implemented")
}
func (UnimplementedMsgServer) DeleteMechanism(context.Context, *MsgDeleteMechanism) (*MsgDeleteMechanismResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMechanism not implemented")
}
func (UnimplementedMsgServer) CreatePerformance(context.Context, *MsgCreatePerformance) (*MsgCreatePerformanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePerformance not implemented")
}
func (UnimplementedMsgServer) UpdatePerformance(context.Context, *MsgUpdatePerformance) (*MsgUpdatePerformanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePerformance not implemented")
}
func (UnimplementedMsgServer) DeletePerformance(context.Context, *MsgDeletePerformance) (*MsgDeletePerformanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePerformance not implemented")
}
func (UnimplementedMsgServer) CalculatePerformance(context.Context, *MsgCalculatePerformance) (*MsgCalculatePerformanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculatePerformance not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateMechanism_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateMechanism)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateMechanism(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateMechanism_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateMechanism(ctx, req.(*MsgCreateMechanism))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateMechanism_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateMechanism)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateMechanism(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateMechanism_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateMechanism(ctx, req.(*MsgUpdateMechanism))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteMechanism_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteMechanism)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteMechanism(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeleteMechanism_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteMechanism(ctx, req.(*MsgDeleteMechanism))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreatePerformance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreatePerformance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreatePerformance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreatePerformance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreatePerformance(ctx, req.(*MsgCreatePerformance))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdatePerformance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdatePerformance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdatePerformance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdatePerformance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdatePerformance(ctx, req.(*MsgUpdatePerformance))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeletePerformance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeletePerformance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeletePerformance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeletePerformance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeletePerformance(ctx, req.(*MsgDeletePerformance))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CalculatePerformance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCalculatePerformance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CalculatePerformance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CalculatePerformance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CalculatePerformance(ctx, req.(*MsgCalculatePerformance))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vita.gainsharing.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "CreateMechanism",
			Handler:    _Msg_CreateMechanism_Handler,
		},
		{
			MethodName: "UpdateMechanism",
			Handler:    _Msg_UpdateMechanism_Handler,
		},
		{
			MethodName: "DeleteMechanism",
			Handler:    _Msg_DeleteMechanism_Handler,
		},
		{
			MethodName: "CreatePerformance",
			Handler:    _Msg_CreatePerformance_Handler,
		},
		{
			MethodName: "UpdatePerformance",
			Handler:    _Msg_UpdatePerformance_Handler,
		},
		{
			MethodName: "DeletePerformance",
			Handler:    _Msg_DeletePerformance_Handler,
		},
		{
			MethodName: "CalculatePerformance",
			Handler:    _Msg_CalculatePerformance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vita/gainsharing/tx.proto",
}

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vita/labour/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgUpdateParams is the Msg/UpdateParams request type.
type MsgUpdateParams struct {
	// authority is the address that controls the module (defaults to x/gov unless overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_efabc46bbb7f1f1b, []int{0}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_efabc46bbb7f1f1b, []int{1}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

type MsgCreateTask struct {
	Creator    string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	TaskId     uint64 `protobuf:"varint,2,opt,name=taskId,proto3" json:"taskId,omitempty"`
	Assigner   string `protobuf:"bytes,3,opt,name=assigner,proto3" json:"assigner,omitempty"`
	State      int32  `protobuf:"varint,4,opt,name=state,proto3" json:"state,omitempty"`
	BeginTask  uint64 `protobuf:"varint,5,opt,name=beginTask,proto3" json:"beginTask,omitempty"`
	Deadline   uint64 `protobuf:"varint,6,opt,name=deadline,proto3" json:"deadline,omitempty"`
	FinishTask uint64 `protobuf:"varint,7,opt,name=finishTask,proto3" json:"finishTask,omitempty"`
	Wager      string `protobuf:"bytes,8,opt,name=wager,proto3" json:"wager,omitempty"`
}

func (m *MsgCreateTask) Reset()         { *m = MsgCreateTask{} }
func (m *MsgCreateTask) String() string { return proto.CompactTextString(m) }
func (*MsgCreateTask) ProtoMessage()    {}
func (*MsgCreateTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_efabc46bbb7f1f1b, []int{2}
}
func (m *MsgCreateTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateTask.Merge(m, src)
}
func (m *MsgCreateTask) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateTask) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateTask.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateTask proto.InternalMessageInfo

func (m *MsgCreateTask) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateTask) GetTaskId() uint64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *MsgCreateTask) GetAssigner() string {
	if m != nil {
		return m.Assigner
	}
	return ""
}

func (m *MsgCreateTask) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *MsgCreateTask) GetBeginTask() uint64 {
	if m != nil {
		return m.BeginTask
	}
	return 0
}

func (m *MsgCreateTask) GetDeadline() uint64 {
	if m != nil {
		return m.Deadline
	}
	return 0
}

func (m *MsgCreateTask) GetFinishTask() uint64 {
	if m != nil {
		return m.FinishTask
	}
	return 0
}

func (m *MsgCreateTask) GetWager() string {
	if m != nil {
		return m.Wager
	}
	return ""
}

type MsgCreateTaskResponse struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgCreateTaskResponse) Reset()         { *m = MsgCreateTaskResponse{} }
func (m *MsgCreateTaskResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateTaskResponse) ProtoMessage()    {}
func (*MsgCreateTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_efabc46bbb7f1f1b, []int{3}
}
func (m *MsgCreateTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateTaskResponse.Merge(m, src)
}
func (m *MsgCreateTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateTaskResponse proto.InternalMessageInfo

func (m *MsgCreateTaskResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgUpdateTask struct {
	Creator    string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id         uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	TaskId     uint64 `protobuf:"varint,3,opt,name=taskId,proto3" json:"taskId,omitempty"`
	Assigner   string `protobuf:"bytes,4,opt,name=assigner,proto3" json:"assigner,omitempty"`
	State      int32  `protobuf:"varint,5,opt,name=state,proto3" json:"state,omitempty"`
	BeginTask  uint64 `protobuf:"varint,6,opt,name=beginTask,proto3" json:"beginTask,omitempty"`
	Deadline   uint64 `protobuf:"varint,7,opt,name=deadline,proto3" json:"deadline,omitempty"`
	FinishTask uint64 `protobuf:"varint,8,opt,name=finishTask,proto3" json:"finishTask,omitempty"`
	Wager      string `protobuf:"bytes,9,opt,name=wager,proto3" json:"wager,omitempty"`
}

func (m *MsgUpdateTask) Reset()         { *m = MsgUpdateTask{} }
func (m *MsgUpdateTask) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateTask) ProtoMessage()    {}
func (*MsgUpdateTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_efabc46bbb7f1f1b, []int{4}
}
func (m *MsgUpdateTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateTask.Merge(m, src)
}
func (m *MsgUpdateTask) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateTask) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateTask.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateTask proto.InternalMessageInfo

func (m *MsgUpdateTask) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateTask) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MsgUpdateTask) GetTaskId() uint64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *MsgUpdateTask) GetAssigner() string {
	if m != nil {
		return m.Assigner
	}
	return ""
}

func (m *MsgUpdateTask) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *MsgUpdateTask) GetBeginTask() uint64 {
	if m != nil {
		return m.BeginTask
	}
	return 0
}

func (m *MsgUpdateTask) GetDeadline() uint64 {
	if m != nil {
		return m.Deadline
	}
	return 0
}

func (m *MsgUpdateTask) GetFinishTask() uint64 {
	if m != nil {
		return m.FinishTask
	}
	return 0
}

func (m *MsgUpdateTask) GetWager() string {
	if m != nil {
		return m.Wager
	}
	return ""
}

type MsgUpdateTaskResponse struct {
}

func (m *MsgUpdateTaskResponse) Reset()         { *m = MsgUpdateTaskResponse{} }
func (m *MsgUpdateTaskResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateTaskResponse) ProtoMessage()    {}
func (*MsgUpdateTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_efabc46bbb7f1f1b, []int{5}
}
func (m *MsgUpdateTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateTaskResponse.Merge(m, src)
}
func (m *MsgUpdateTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateTaskResponse proto.InternalMessageInfo

type MsgDeleteTask struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id      uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgDeleteTask) Reset()         { *m = MsgDeleteTask{} }
func (m *MsgDeleteTask) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteTask) ProtoMessage()    {}
func (*MsgDeleteTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_efabc46bbb7f1f1b, []int{6}
}
func (m *MsgDeleteTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteTask.Merge(m, src)
}
func (m *MsgDeleteTask) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteTask) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteTask.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteTask proto.InternalMessageInfo

func (m *MsgDeleteTask) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgDeleteTask) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgDeleteTaskResponse struct {
}

func (m *MsgDeleteTaskResponse) Reset()         { *m = MsgDeleteTaskResponse{} }
func (m *MsgDeleteTaskResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteTaskResponse) ProtoMessage()    {}
func (*MsgDeleteTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_efabc46bbb7f1f1b, []int{7}
}
func (m *MsgDeleteTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteTaskResponse.Merge(m, src)
}
func (m *MsgDeleteTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteTaskResponse proto.InternalMessageInfo

type MsgCreateActivity struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Worker      string `protobuf:"bytes,2,opt,name=worker,proto3" json:"worker,omitempty"`
	BeginWork   uint64 `protobuf:"varint,3,opt,name=beginWork,proto3" json:"beginWork,omitempty"`
	FinishWork  uint64 `protobuf:"varint,4,opt,name=finishWork,proto3" json:"finishWork,omitempty"`
	WorkingTime int32  `protobuf:"varint,5,opt,name=workingTime,proto3" json:"workingTime,omitempty"`
	TaskId      uint64 `protobuf:"varint,6,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (m *MsgCreateActivity) Reset()         { *m = MsgCreateActivity{} }
func (m *MsgCreateActivity) String() string { return proto.CompactTextString(m) }
func (*MsgCreateActivity) ProtoMessage()    {}
func (*MsgCreateActivity) Descriptor() ([]byte, []int) {
	return fileDescriptor_efabc46bbb7f1f1b, []int{8}
}
func (m *MsgCreateActivity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateActivity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateActivity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateActivity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateActivity.Merge(m, src)
}
func (m *MsgCreateActivity) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateActivity) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateActivity.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateActivity proto.InternalMessageInfo

func (m *MsgCreateActivity) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateActivity) GetWorker() string {
	if m != nil {
		return m.Worker
	}
	return ""
}

func (m *MsgCreateActivity) GetBeginWork() uint64 {
	if m != nil {
		return m.BeginWork
	}
	return 0
}

func (m *MsgCreateActivity) GetFinishWork() uint64 {
	if m != nil {
		return m.FinishWork
	}
	return 0
}

func (m *MsgCreateActivity) GetWorkingTime() int32 {
	if m != nil {
		return m.WorkingTime
	}
	return 0
}

func (m *MsgCreateActivity) GetTaskId() uint64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

type MsgCreateActivityResponse struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgCreateActivityResponse) Reset()         { *m = MsgCreateActivityResponse{} }
func (m *MsgCreateActivityResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateActivityResponse) ProtoMessage()    {}
func (*MsgCreateActivityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_efabc46bbb7f1f1b, []int{9}
}
func (m *MsgCreateActivityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateActivityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateActivityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateActivityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateActivityResponse.Merge(m, src)
}
func (m *MsgCreateActivityResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateActivityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateActivityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateActivityResponse proto.InternalMessageInfo

func (m *MsgCreateActivityResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgUpdateActivity struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id          uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Worker      string `protobuf:"bytes,3,opt,name=worker,proto3" json:"worker,omitempty"`
	BeginWork   uint64 `protobuf:"varint,4,opt,name=beginWork,proto3" json:"beginWork,omitempty"`
	FinishWork  uint64 `protobuf:"varint,5,opt,name=finishWork,proto3" json:"finishWork,omitempty"`
	WorkingTime int32  `protobuf:"varint,6,opt,name=workingTime,proto3" json:"workingTime,omitempty"`
	TaskId      uint64 `protobuf:"varint,7,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (m *MsgUpdateActivity) Reset()         { *m = MsgUpdateActivity{} }
func (m *MsgUpdateActivity) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateActivity) ProtoMessage()    {}
func (*MsgUpdateActivity) Descriptor() ([]byte, []int) {
	return fileDescriptor_efabc46bbb7f1f1b, []int{10}
}
func (m *MsgUpdateActivity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateActivity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateActivity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateActivity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateActivity.Merge(m, src)
}
func (m *MsgUpdateActivity) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateActivity) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateActivity.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateActivity proto.InternalMessageInfo

func (m *MsgUpdateActivity) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateActivity) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MsgUpdateActivity) GetWorker() string {
	if m != nil {
		return m.Worker
	}
	return ""
}

func (m *MsgUpdateActivity) GetBeginWork() uint64 {
	if m != nil {
		return m.BeginWork
	}
	return 0
}

func (m *MsgUpdateActivity) GetFinishWork() uint64 {
	if m != nil {
		return m.FinishWork
	}
	return 0
}

func (m *MsgUpdateActivity) GetWorkingTime() int32 {
	if m != nil {
		return m.WorkingTime
	}
	return 0
}

func (m *MsgUpdateActivity) GetTaskId() uint64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

type MsgUpdateActivityResponse struct {
}

func (m *MsgUpdateActivityResponse) Reset()         { *m = MsgUpdateActivityResponse{} }
func (m *MsgUpdateActivityResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateActivityResponse) ProtoMessage()    {}
func (*MsgUpdateActivityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_efabc46bbb7f1f1b, []int{11}
}
func (m *MsgUpdateActivityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateActivityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateActivityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateActivityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateActivityResponse.Merge(m, src)
}
func (m *MsgUpdateActivityResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateActivityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateActivityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateActivityResponse proto.InternalMessageInfo

type MsgDeleteActivity struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id      uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgDeleteActivity) Reset()         { *m = MsgDeleteActivity{} }
func (m *MsgDeleteActivity) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteActivity) ProtoMessage()    {}
func (*MsgDeleteActivity) Descriptor() ([]byte, []int) {
	return fileDescriptor_efabc46bbb7f1f1b, []int{12}
}
func (m *MsgDeleteActivity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteActivity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteActivity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteActivity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteActivity.Merge(m, src)
}
func (m *MsgDeleteActivity) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteActivity) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteActivity.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteActivity proto.InternalMessageInfo

func (m *MsgDeleteActivity) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgDeleteActivity) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgDeleteActivityResponse struct {
}

func (m *MsgDeleteActivityResponse) Reset()         { *m = MsgDeleteActivityResponse{} }
func (m *MsgDeleteActivityResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteActivityResponse) ProtoMessage()    {}
func (*MsgDeleteActivityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_efabc46bbb7f1f1b, []int{13}
}
func (m *MsgDeleteActivityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteActivityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteActivityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteActivityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteActivityResponse.Merge(m, src)
}
func (m *MsgDeleteActivityResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteActivityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteActivityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteActivityResponse proto.InternalMessageInfo

type MsgBeginTask struct {
	Creator   string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Taskid    uint64 `protobuf:"varint,2,opt,name=taskid,proto3" json:"taskid,omitempty"`
	Assigner  string `protobuf:"bytes,3,opt,name=assigner,proto3" json:"assigner,omitempty"`
	BeginTask uint64 `protobuf:"varint,4,opt,name=beginTask,proto3" json:"beginTask,omitempty"`
	Deadline  uint64 `protobuf:"varint,5,opt,name=deadline,proto3" json:"deadline,omitempty"`
	Wager     string `protobuf:"bytes,6,opt,name=wager,proto3" json:"wager,omitempty"`
}

func (m *MsgBeginTask) Reset()         { *m = MsgBeginTask{} }
func (m *MsgBeginTask) String() string { return proto.CompactTextString(m) }
func (*MsgBeginTask) ProtoMessage()    {}
func (*MsgBeginTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_efabc46bbb7f1f1b, []int{14}
}
func (m *MsgBeginTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBeginTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBeginTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBeginTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBeginTask.Merge(m, src)
}
func (m *MsgBeginTask) XXX_Size() int {
	return m.Size()
}
func (m *MsgBeginTask) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBeginTask.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBeginTask proto.InternalMessageInfo

func (m *MsgBeginTask) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgBeginTask) GetTaskid() uint64 {
	if m != nil {
		return m.Taskid
	}
	return 0
}

func (m *MsgBeginTask) GetAssigner() string {
	if m != nil {
		return m.Assigner
	}
	return ""
}

func (m *MsgBeginTask) GetBeginTask() uint64 {
	if m != nil {
		return m.BeginTask
	}
	return 0
}

func (m *MsgBeginTask) GetDeadline() uint64 {
	if m != nil {
		return m.Deadline
	}
	return 0
}

func (m *MsgBeginTask) GetWager() string {
	if m != nil {
		return m.Wager
	}
	return ""
}

type MsgBeginTaskResponse struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgBeginTaskResponse) Reset()         { *m = MsgBeginTaskResponse{} }
func (m *MsgBeginTaskResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBeginTaskResponse) ProtoMessage()    {}
func (*MsgBeginTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_efabc46bbb7f1f1b, []int{15}
}
func (m *MsgBeginTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBeginTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBeginTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBeginTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBeginTaskResponse.Merge(m, src)
}
func (m *MsgBeginTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBeginTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBeginTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBeginTaskResponse proto.InternalMessageInfo

func (m *MsgBeginTaskResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgWork struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Worker      string `protobuf:"bytes,2,opt,name=worker,proto3" json:"worker,omitempty"`
	Taskid      uint64 `protobuf:"varint,3,opt,name=taskid,proto3" json:"taskid,omitempty"`
	BeginWork   uint64 `protobuf:"varint,4,opt,name=beginWork,proto3" json:"beginWork,omitempty"`
	FinishWork  uint64 `protobuf:"varint,5,opt,name=finishWork,proto3" json:"finishWork,omitempty"`
	WorkingTime int32  `protobuf:"varint,6,opt,name=workingTime,proto3" json:"workingTime,omitempty"`
}

func (m *MsgWork) Reset()         { *m = MsgWork{} }
func (m *MsgWork) String() string { return proto.CompactTextString(m) }
func (*MsgWork) ProtoMessage()    {}
func (*MsgWork) Descriptor() ([]byte, []int) {
	return fileDescriptor_efabc46bbb7f1f1b, []int{16}
}
func (m *MsgWork) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWork) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWork.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWork) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWork.Merge(m, src)
}
func (m *MsgWork) XXX_Size() int {
	return m.Size()
}
func (m *MsgWork) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWork.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWork proto.InternalMessageInfo

func (m *MsgWork) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgWork) GetWorker() string {
	if m != nil {
		return m.Worker
	}
	return ""
}

func (m *MsgWork) GetTaskid() uint64 {
	if m != nil {
		return m.Taskid
	}
	return 0
}

func (m *MsgWork) GetBeginWork() uint64 {
	if m != nil {
		return m.BeginWork
	}
	return 0
}

func (m *MsgWork) GetFinishWork() uint64 {
	if m != nil {
		return m.FinishWork
	}
	return 0
}

func (m *MsgWork) GetWorkingTime() int32 {
	if m != nil {
		return m.WorkingTime
	}
	return 0
}

type MsgWorkResponse struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgWorkResponse) Reset()         { *m = MsgWorkResponse{} }
func (m *MsgWorkResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWorkResponse) ProtoMessage()    {}
func (*MsgWorkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_efabc46bbb7f1f1b, []int{17}
}
func (m *MsgWorkResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWorkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWorkResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWorkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWorkResponse.Merge(m, src)
}
func (m *MsgWorkResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWorkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWorkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWorkResponse proto.InternalMessageInfo

func (m *MsgWorkResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgFinishTask struct {
	Creator    string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Taskid     uint64 `protobuf:"varint,2,opt,name=taskid,proto3" json:"taskid,omitempty"`
	FinishTask uint64 `protobuf:"varint,3,opt,name=finishTask,proto3" json:"finishTask,omitempty"`
}

func (m *MsgFinishTask) Reset()         { *m = MsgFinishTask{} }
func (m *MsgFinishTask) String() string { return proto.CompactTextString(m) }
func (*MsgFinishTask) ProtoMessage()    {}
func (*MsgFinishTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_efabc46bbb7f1f1b, []int{18}
}
func (m *MsgFinishTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFinishTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFinishTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFinishTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFinishTask.Merge(m, src)
}
func (m *MsgFinishTask) XXX_Size() int {
	return m.Size()
}
func (m *MsgFinishTask) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFinishTask.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFinishTask proto.InternalMessageInfo

func (m *MsgFinishTask) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgFinishTask) GetTaskid() uint64 {
	if m != nil {
		return m.Taskid
	}
	return 0
}

func (m *MsgFinishTask) GetFinishTask() uint64 {
	if m != nil {
		return m.FinishTask
	}
	return 0
}

type MsgFinishTaskResponse struct {
}

func (m *MsgFinishTaskResponse) Reset()         { *m = MsgFinishTaskResponse{} }
func (m *MsgFinishTaskResponse) String() string { return proto.CompactTextString(m) }
func (*MsgFinishTaskResponse) ProtoMessage()    {}
func (*MsgFinishTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_efabc46bbb7f1f1b, []int{19}
}
func (m *MsgFinishTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFinishTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFinishTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFinishTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFinishTaskResponse.Merge(m, src)
}
func (m *MsgFinishTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgFinishTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFinishTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFinishTaskResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgUpdateParams)(nil), "vita.labour.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "vita.labour.MsgUpdateParamsResponse")
	proto.RegisterType((*MsgCreateTask)(nil), "vita.labour.MsgCreateTask")
	proto.RegisterType((*MsgCreateTaskResponse)(nil), "vita.labour.MsgCreateTaskResponse")
	proto.RegisterType((*MsgUpdateTask)(nil), "vita.labour.MsgUpdateTask")
	proto.RegisterType((*MsgUpdateTaskResponse)(nil), "vita.labour.MsgUpdateTaskResponse")
	proto.RegisterType((*MsgDeleteTask)(nil), "vita.labour.MsgDeleteTask")
	proto.RegisterType((*MsgDeleteTaskResponse)(nil), "vita.labour.MsgDeleteTaskResponse")
	proto.RegisterType((*MsgCreateActivity)(nil), "vita.labour.MsgCreateActivity")
	proto.RegisterType((*MsgCreateActivityResponse)(nil), "vita.labour.MsgCreateActivityResponse")
	proto.RegisterType((*MsgUpdateActivity)(nil), "vita.labour.MsgUpdateActivity")
	proto.RegisterType((*MsgUpdateActivityResponse)(nil), "vita.labour.MsgUpdateActivityResponse")
	proto.RegisterType((*MsgDeleteActivity)(nil), "vita.labour.MsgDeleteActivity")
	proto.RegisterType((*MsgDeleteActivityResponse)(nil), "vita.labour.MsgDeleteActivityResponse")
	proto.RegisterType((*MsgBeginTask)(nil), "vita.labour.MsgBeginTask")
	proto.RegisterType((*MsgBeginTaskResponse)(nil), "vita.labour.MsgBeginTaskResponse")
	proto.RegisterType((*MsgWork)(nil), "vita.labour.MsgWork")
	proto.RegisterType((*MsgWorkResponse)(nil), "vita.labour.MsgWorkResponse")
	proto.RegisterType((*MsgFinishTask)(nil), "vita.labour.MsgFinishTask")
	proto.RegisterType((*MsgFinishTaskResponse)(nil), "vita.labour.MsgFinishTaskResponse")
}

func init() { proto.RegisterFile("vita/labour/tx.proto", fileDescriptor_efabc46bbb7f1f1b) }

var fileDescriptor_efabc46bbb7f1f1b = []byte{
	// 908 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xcd, 0x4f, 0xdb, 0x48,
	0x14, 0x8f, 0x13, 0xc7, 0x21, 0x03, 0xcb, 0x0a, 0x93, 0x05, 0xc7, 0xcb, 0x7a, 0x43, 0xb4, 0x62,
	0x11, 0x2b, 0x92, 0x5d, 0x56, 0xe2, 0xc0, 0x8d, 0xec, 0xaa, 0x15, 0x6a, 0x23, 0x55, 0x2e, 0x55,
	0xab, 0x5e, 0x2a, 0x83, 0xa7, 0x66, 0x14, 0x62, 0x47, 0x1e, 0xf3, 0x75, 0x6b, 0x7b, 0xec, 0xa9,
	0x7f, 0x46, 0x2f, 0x95, 0x90, 0xda, 0x53, 0x6f, 0xbd, 0x21, 0xf5, 0x82, 0x7a, 0xaa, 0x54, 0xa9,
	0xaa, 0xe0, 0xc0, 0xb9, 0xff, 0x41, 0x35, 0x33, 0xfe, 0x18, 0x7f, 0xd2, 0x1c, 0x7a, 0x81, 0xbc,
	0xf7, 0x3c, 0xbf, 0x79, 0xbf, 0xdf, 0x9b, 0xf7, 0x66, 0x40, 0xe3, 0x10, 0x79, 0x46, 0x77, 0xdf,
	0xd8, 0x71, 0x0e, 0xdc, 0xae, 0x77, 0xdc, 0x19, 0xb9, 0x8e, 0xe7, 0xc8, 0x93, 0xc4, 0xdb, 0x61,
	0x5e, 0x75, 0xc6, 0x18, 0x22, 0xdb, 0xe9, 0xd2, 0xbf, 0x2c, 0xae, 0xce, 0xef, 0x3a, 0x78, 0xe8,
	0xe0, 0xee, 0x10, 0x5b, 0xdd, 0xc3, 0x7f, 0xc8, 0x3f, 0x3f, 0xd0, 0x64, 0x81, 0x47, 0xd4, 0xea,
	0x32, 0xc3, 0x0f, 0x35, 0x2c, 0xc7, 0x72, 0x98, 0x9f, 0xfc, 0xf2, 0xbd, 0x0a, 0xbf, 0xff, 0xc8,
	0x70, 0x8d, 0x61, 0xf0, 0xfd, 0x5c, 0x2c, 0x33, 0x03, 0x0f, 0x7c, 0xbf, 0xca, 0xfb, 0x8d, 0x5d,
	0x0f, 0x1d, 0x22, 0xef, 0x84, 0xc5, 0xda, 0xaf, 0x05, 0xf0, 0x73, 0x1f, 0x5b, 0xf7, 0x46, 0xa6,
	0xe1, 0xc1, 0x3b, 0x14, 0x4d, 0x5e, 0x07, 0x75, 0xe3, 0xc0, 0xdb, 0x73, 0x5c, 0xe4, 0x9d, 0x28,
	0x42, 0x4b, 0x58, 0xae, 0xf7, 0x94, 0x0f, 0x6f, 0x56, 0x1b, 0x7e, 0x72, 0x9b, 0xa6, 0xe9, 0x42,
	0x8c, 0xef, 0x7a, 0x2e, 0xb2, 0x2d, 0x3d, 0xfa, 0x54, 0x5e, 0x07, 0x12, 0xcb, 0x47, 0x29, 0xb7,
	0x84, 0xe5, 0xc9, 0xb5, 0xd9, 0x0e, 0x27, 0x4a, 0x87, 0x81, 0xf7, 0xea, 0x67, 0x9f, 0x7f, 0x2f,
	0xbd, 0xbc, 0x3a, 0x5d, 0x11, 0x74, 0xff, 0xeb, 0x8d, 0xbf, 0x9f, 0x5d, 0x9d, 0xae, 0x44, 0x38,
	0xcf, 0xaf, 0x4e, 0x57, 0x7e, 0xa3, 0x29, 0x1f, 0x07, 0x49, 0x27, 0x32, 0x6c, 0x37, 0xc1, 0x7c,
	0xc2, 0xa5, 0x43, 0x3c, 0x72, 0x6c, 0x0c, 0xdb, 0x5f, 0x05, 0xf0, 0x53, 0x1f, 0x5b, 0xff, 0xb9,
	0xd0, 0xf0, 0xe0, 0xb6, 0x81, 0x07, 0xb2, 0x02, 0x6a, 0xbb, 0xc4, 0x72, 0x5c, 0x46, 0x46, 0x0f,
	0x4c, 0x79, 0x0e, 0x48, 0x44, 0xa6, 0x2d, 0x93, 0x26, 0x2c, 0xea, 0xbe, 0x25, 0xab, 0x60, 0xc2,
	0xc0, 0x18, 0x59, 0x36, 0x74, 0x95, 0x0a, 0x5d, 0x12, 0xda, 0x72, 0x03, 0x54, 0xb1, 0x67, 0x78,
	0x50, 0x11, 0x5b, 0xc2, 0x72, 0x55, 0x67, 0x86, 0xbc, 0x00, 0xea, 0x3b, 0xd0, 0x42, 0x36, 0xd9,
	0x50, 0xa9, 0x52, 0xb0, 0xc8, 0x41, 0xf0, 0x4c, 0x68, 0x98, 0xfb, 0xc8, 0x86, 0x8a, 0x44, 0x83,
	0xa1, 0x2d, 0x6b, 0x00, 0x3c, 0x46, 0x36, 0xc2, 0x7b, 0x74, 0x69, 0x8d, 0x46, 0x39, 0x0f, 0xd9,
	0xef, 0xc8, 0xb0, 0xa0, 0xab, 0x4c, 0xd0, 0x44, 0x98, 0xb1, 0x31, 0x45, 0x24, 0x0b, 0x78, 0xb4,
	0xff, 0x04, 0xbf, 0xc4, 0x28, 0x07, 0x62, 0xc8, 0xd3, 0xa0, 0x8c, 0x4c, 0xca, 0x5a, 0xd4, 0xcb,
	0xc8, 0x6c, 0x3f, 0x2d, 0x53, 0x71, 0x98, 0x70, 0xd7, 0x88, 0xc3, 0xd6, 0x96, 0x83, 0xb5, 0x9c,
	0x58, 0x95, 0x5c, 0xb1, 0xc4, 0x3c, 0xb1, 0xaa, 0xb9, 0x62, 0x49, 0x45, 0x62, 0xd5, 0x0a, 0xc5,
	0x9a, 0xc8, 0x17, 0xab, 0x9e, 0x2f, 0xd6, 0x3c, 0x15, 0x2b, 0x92, 0x20, 0x3c, 0x39, 0x37, 0xa9,
	0x36, 0xff, 0xc3, 0x7d, 0x38, 0xae, 0x36, 0x99, 0x3b, 0x44, 0x40, 0xe1, 0x0e, 0xef, 0x05, 0x30,
	0x13, 0x16, 0x6a, 0xd3, 0x6f, 0xc4, 0xe2, 0xf3, 0x79, 0xe4, 0xb8, 0x03, 0xe8, 0xd2, 0xad, 0xea,
	0xba, 0x6f, 0x85, 0x02, 0xde, 0x77, 0xdc, 0x81, 0x5f, 0x8d, 0xc8, 0x11, 0x89, 0x44, 0xc3, 0x22,
	0x2f, 0x12, 0x8d, 0xb7, 0xc0, 0x24, 0xc1, 0x41, 0xb6, 0xb5, 0x8d, 0x86, 0x41, 0x69, 0x78, 0x17,
	0x57, 0x6a, 0x89, 0x2f, 0x75, 0x82, 0xe6, 0x5f, 0xa0, 0x99, 0x22, 0x93, 0x7b, 0xf2, 0x3e, 0x31,
	0xea, 0x4c, 0xf6, 0xef, 0xa0, 0x9e, 0x71, 0xfa, 0x7c, 0x29, 0x2a, 0xf9, 0x52, 0x88, 0xc5, 0x52,
	0x54, 0xaf, 0x93, 0x42, 0x2a, 0x92, 0xa2, 0x56, 0x20, 0xc5, 0xaf, 0x54, 0x8a, 0x38, 0xb9, 0xb0,
	0xea, 0xb7, 0x28, 0x73, 0x76, 0x1c, 0xc6, 0x67, 0x9e, 0xb9, 0x53, 0x1c, 0x2c, 0xdc, 0xe9, 0xad,
	0x00, 0xa6, 0xfa, 0xd8, 0xea, 0x85, 0xbd, 0x74, 0xed, 0xe8, 0x43, 0xb1, 0xd1, 0x87, 0x8a, 0x47,
	0x5f, 0xac, 0x6f, 0xc5, 0xa2, 0xbe, 0xad, 0x26, 0xfa, 0x36, 0xec, 0x4b, 0x29, 0xbf, 0x2f, 0x97,
	0x40, 0x83, 0xcf, 0x3d, 0xf7, 0x24, 0xbd, 0x13, 0x40, 0xad, 0x8f, 0x2d, 0x5a, 0xbf, 0xf1, 0x5b,
	0x27, 0xe2, 0x5d, 0x89, 0xf1, 0xfe, 0xc1, 0xe7, 0x28, 0xc1, 0x75, 0x91, 0x5e, 0xba, 0x64, 0x69,
	0x2e, 0x4d, 0x87, 0x4e, 0xa3, 0x1b, 0xd1, 0x6c, 0x1b, 0xbf, 0x96, 0xf1, 0x69, 0x59, 0x49, 0x4e,
	0xcb, 0xcc, 0xa9, 0x15, 0x6d, 0x18, 0x64, 0xb6, 0xf6, 0x4a, 0x02, 0x95, 0x3e, 0xb6, 0x64, 0x1d,
	0x4c, 0xc5, 0x9e, 0x09, 0x0b, 0xb1, 0xeb, 0x3d, 0x71, 0x1f, 0xab, 0x7f, 0x14, 0x45, 0x43, 0xd6,
	0xb7, 0x01, 0xe0, 0x6e, 0x6a, 0x35, 0xb9, 0x26, 0x8a, 0xa9, 0xed, 0xfc, 0x18, 0x8f, 0xc6, 0x5d,
	0x6d, 0x6a, 0x76, 0x06, 0xd9, 0x68, 0xe9, 0xfb, 0x80, 0xa0, 0x71, 0x97, 0x41, 0x0a, 0x2d, 0x8a,
	0xa5, 0xd1, 0xd2, 0xb3, 0x5f, 0x7e, 0x00, 0xa6, 0x13, 0x73, 0x5f, 0xcb, 0x66, 0x14, 0xc4, 0xd5,
	0xa5, 0xe2, 0x38, 0x8f, 0x9c, 0x18, 0xab, 0x5a, 0x36, 0xbb, 0x7c, 0xe4, 0xec, 0xc9, 0x45, 0x90,
	0x13, 0x63, 0x4b, 0xcb, 0x66, 0x9a, 0x8f, 0x9c, 0x3d, 0xa9, 0xe4, 0x2d, 0x50, 0x8f, 0xa6, 0x54,
	0x33, 0xb9, 0x28, 0x0c, 0xa9, 0x8b, 0xb9, 0xa1, 0x10, 0x6a, 0x03, 0x88, 0xb4, 0x07, 0x1b, 0xc9,
	0x4f, 0x89, 0x57, 0x5d, 0xc8, 0xf2, 0xf2, 0x25, 0xe6, 0x3a, 0x2c, 0x55, 0xe2, 0x28, 0x96, 0x2e,
	0x71, 0xba, 0x51, 0xd4, 0xea, 0x13, 0xf2, 0xac, 0xed, 0xad, 0x9e, 0x5d, 0x68, 0xc2, 0xf9, 0x85,
	0x26, 0x7c, 0xb9, 0xd0, 0x84, 0x17, 0x97, 0x5a, 0xe9, 0xfc, 0x52, 0x2b, 0x7d, 0xbc, 0xd4, 0x4a,
	0x0f, 0x67, 0xe3, 0xaf, 0x5a, 0xef, 0x64, 0x04, 0xf1, 0x8e, 0x44, 0x1f, 0xe2, 0xff, 0x7e, 0x0b,
	0x00, 0x00, 0xff, 0xff, 0xb0, 0x96, 0x30, 0x4b, 0x58, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	CreateTask(ctx context.Context, in *MsgCreateTask, opts ...grpc.CallOption) (*MsgCreateTaskResponse, error)
	UpdateTask(ctx context.Context, in *MsgUpdateTask, opts ...grpc.CallOption) (*MsgUpdateTaskResponse, error)
	DeleteTask(ctx context.Context, in *MsgDeleteTask, opts ...grpc.CallOption) (*MsgDeleteTaskResponse, error)
	CreateActivity(ctx context.Context, in *MsgCreateActivity, opts ...grpc.CallOption) (*MsgCreateActivityResponse, error)
	UpdateActivity(ctx context.Context, in *MsgUpdateActivity, opts ...grpc.CallOption) (*MsgUpdateActivityResponse, error)
	DeleteActivity(ctx context.Context, in *MsgDeleteActivity, opts ...grpc.CallOption) (*MsgDeleteActivityResponse, error)
	BeginTask(ctx context.Context, in *MsgBeginTask, opts ...grpc.CallOption) (*MsgBeginTaskResponse, error)
	Work(ctx context.Context, in *MsgWork, opts ...grpc.CallOption) (*MsgWorkResponse, error)
	FinishTask(ctx context.Context, in *MsgFinishTask, opts ...grpc.CallOption) (*MsgFinishTaskResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/vita.labour.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateTask(ctx context.Context, in *MsgCreateTask, opts ...grpc.CallOption) (*MsgCreateTaskResponse, error) {
	out := new(MsgCreateTaskResponse)
	err := c.cc.Invoke(ctx, "/vita.labour.Msg/CreateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateTask(ctx context.Context, in *MsgUpdateTask, opts ...grpc.CallOption) (*MsgUpdateTaskResponse, error) {
	out := new(MsgUpdateTaskResponse)
	err := c.cc.Invoke(ctx, "/vita.labour.Msg/UpdateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteTask(ctx context.Context, in *MsgDeleteTask, opts ...grpc.CallOption) (*MsgDeleteTaskResponse, error) {
	out := new(MsgDeleteTaskResponse)
	err := c.cc.Invoke(ctx, "/vita.labour.Msg/DeleteTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateActivity(ctx context.Context, in *MsgCreateActivity, opts ...grpc.CallOption) (*MsgCreateActivityResponse, error) {
	out := new(MsgCreateActivityResponse)
	err := c.cc.Invoke(ctx, "/vita.labour.Msg/CreateActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateActivity(ctx context.Context, in *MsgUpdateActivity, opts ...grpc.CallOption) (*MsgUpdateActivityResponse, error) {
	out := new(MsgUpdateActivityResponse)
	err := c.cc.Invoke(ctx, "/vita.labour.Msg/UpdateActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteActivity(ctx context.Context, in *MsgDeleteActivity, opts ...grpc.CallOption) (*MsgDeleteActivityResponse, error) {
	out := new(MsgDeleteActivityResponse)
	err := c.cc.Invoke(ctx, "/vita.labour.Msg/DeleteActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BeginTask(ctx context.Context, in *MsgBeginTask, opts ...grpc.CallOption) (*MsgBeginTaskResponse, error) {
	out := new(MsgBeginTaskResponse)
	err := c.cc.Invoke(ctx, "/vita.labour.Msg/BeginTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Work(ctx context.Context, in *MsgWork, opts ...grpc.CallOption) (*MsgWorkResponse, error) {
	out := new(MsgWorkResponse)
	err := c.cc.Invoke(ctx, "/vita.labour.Msg/Work", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) FinishTask(ctx context.Context, in *MsgFinishTask, opts ...grpc.CallOption) (*MsgFinishTaskResponse, error) {
	out := new(MsgFinishTaskResponse)
	err := c.cc.Invoke(ctx, "/vita.labour.Msg/FinishTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	CreateTask(context.Context, *MsgCreateTask) (*MsgCreateTaskResponse, error)
	UpdateTask(context.Context, *MsgUpdateTask) (*MsgUpdateTaskResponse, error)
	DeleteTask(context.Context, *MsgDeleteTask) (*MsgDeleteTaskResponse, error)
	CreateActivity(context.Context, *MsgCreateActivity) (*MsgCreateActivityResponse, error)
	UpdateActivity(context.Context, *MsgUpdateActivity) (*MsgUpdateActivityResponse, error)
	DeleteActivity(context.Context, *MsgDeleteActivity) (*MsgDeleteActivityResponse, error)
	BeginTask(context.Context, *MsgBeginTask) (*MsgBeginTaskResponse, error)
	Work(context.Context, *MsgWork) (*MsgWorkResponse, error)
	FinishTask(context.Context, *MsgFinishTask) (*MsgFinishTaskResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (*UnimplementedMsgServer) CreateTask(ctx context.Context, req *MsgCreateTask) (*MsgCreateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (*UnimplementedMsgServer) UpdateTask(ctx context.Context, req *MsgUpdateTask) (*MsgUpdateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTask not implemented")
}
func (*UnimplementedMsgServer) DeleteTask(ctx context.Context, req *MsgDeleteTask) (*MsgDeleteTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (*UnimplementedMsgServer) CreateActivity(ctx context.Context, req *MsgCreateActivity) (*MsgCreateActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateActivity not implemented")
}
func (*UnimplementedMsgServer) UpdateActivity(ctx context.Context, req *MsgUpdateActivity) (*MsgUpdateActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateActivity not implemented")
}
func (*UnimplementedMsgServer) DeleteActivity(ctx context.Context, req *MsgDeleteActivity) (*MsgDeleteActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteActivity not implemented")
}
func (*UnimplementedMsgServer) BeginTask(ctx context.Context, req *MsgBeginTask) (*MsgBeginTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeginTask not implemented")
}
func (*UnimplementedMsgServer) Work(ctx context.Context, req *MsgWork) (*MsgWorkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Work not implemented")
}
func (*UnimplementedMsgServer) FinishTask(ctx context.Context, req *MsgFinishTask) (*MsgFinishTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishTask not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vita.labour.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vita.labour.Msg/CreateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateTask(ctx, req.(*MsgCreateTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vita.labour.Msg/UpdateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateTask(ctx, req.(*MsgUpdateTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vita.labour.Msg/DeleteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteTask(ctx, req.(*MsgDeleteTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateActivity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vita.labour.Msg/CreateActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateActivity(ctx, req.(*MsgCreateActivity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateActivity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vita.labour.Msg/UpdateActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateActivity(ctx, req.(*MsgUpdateActivity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteActivity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vita.labour.Msg/DeleteActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteActivity(ctx, req.(*MsgDeleteActivity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BeginTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBeginTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BeginTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vita.labour.Msg/BeginTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BeginTask(ctx, req.(*MsgBeginTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Work_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWork)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Work(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vita.labour.Msg/Work",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Work(ctx, req.(*MsgWork))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_FinishTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFinishTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).FinishTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vita.labour.Msg/FinishTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).FinishTask(ctx, req.(*MsgFinishTask))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vita.labour.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "CreateTask",
			Handler:    _Msg_CreateTask_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _Msg_UpdateTask_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _Msg_DeleteTask_Handler,
		},
		{
			MethodName: "CreateActivity",
			Handler:    _Msg_CreateActivity_Handler,
		},
		{
			MethodName: "UpdateActivity",
			Handler:    _Msg_UpdateActivity_Handler,
		},
		{
			MethodName: "DeleteActivity",
			Handler:    _Msg_DeleteActivity_Handler,
		},
		{
			MethodName: "BeginTask",
			Handler:    _Msg_BeginTask_Handler,
		},
		{
			MethodName: "Work",
			Handler:    _Msg_Work_Handler,
		},
		{
			MethodName: "FinishTask",
			Handler:    _Msg_FinishTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vita/labour/tx.proto",
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Wager) > 0 {
		i -= len(m.Wager)
		copy(dAtA[i:], m.Wager)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Wager)))
		i--
		dAtA[i] = 0x42
	}
	if m.FinishTask != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.FinishTask))
		i--
		dAtA[i] = 0x38
	}
	if m.Deadline != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Deadline))
		i--
		dAtA[i] = 0x30
	}
	if m.BeginTask != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BeginTask))
		i--
		dAtA[i] = 0x28
	}
	if m.State != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Assigner) > 0 {
		i -= len(m.Assigner)
		copy(dAtA[i:], m.Assigner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Assigner)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TaskId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TaskId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Wager) > 0 {
		i -= len(m.Wager)
		copy(dAtA[i:], m.Wager)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Wager)))
		i--
		dAtA[i] = 0x4a
	}
	if m.FinishTask != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.FinishTask))
		i--
		dAtA[i] = 0x40
	}
	if m.Deadline != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Deadline))
		i--
		dAtA[i] = 0x38
	}
	if m.BeginTask != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BeginTask))
		i--
		dAtA[i] = 0x30
	}
	if m.State != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Assigner) > 0 {
		i -= len(m.Assigner)
		copy(dAtA[i:], m.Assigner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Assigner)))
		i--
		dAtA[i] = 0x22
	}
	if m.TaskId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TaskId))
		i--
		dAtA[i] = 0x18
	}
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateActivity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateActivity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateActivity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TaskId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TaskId))
		i--
		dAtA[i] = 0x30
	}
	if m.WorkingTime != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.WorkingTime))
		i--
		dAtA[i] = 0x28
	}
	if m.FinishWork != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.FinishWork))
		i--
		dAtA[i] = 0x20
	}
	if m.BeginWork != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BeginWork))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Worker) > 0 {
		i -= len(m.Worker)
		copy(dAtA[i:], m.Worker)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Worker)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateActivityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateActivityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateActivityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateActivity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateActivity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateActivity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TaskId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TaskId))
		i--
		dAtA[i] = 0x38
	}
	if m.WorkingTime != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.WorkingTime))
		i--
		dAtA[i] = 0x30
	}
	if m.FinishWork != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.FinishWork))
		i--
		dAtA[i] = 0x28
	}
	if m.BeginWork != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BeginWork))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Worker) > 0 {
		i -= len(m.Worker)
		copy(dAtA[i:], m.Worker)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Worker)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateActivityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateActivityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateActivityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteActivity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteActivity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteActivity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteActivityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteActivityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteActivityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBeginTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBeginTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBeginTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Wager) > 0 {
		i -= len(m.Wager)
		copy(dAtA[i:], m.Wager)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Wager)))
		i--
		dAtA[i] = 0x32
	}
	if m.Deadline != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Deadline))
		i--
		dAtA[i] = 0x28
	}
	if m.BeginTask != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BeginTask))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Assigner) > 0 {
		i -= len(m.Assigner)
		copy(dAtA[i:], m.Assigner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Assigner)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Taskid != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Taskid))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBeginTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBeginTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBeginTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgWork) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WorkingTime != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.WorkingTime))
		i--
		dAtA[i] = 0x30
	}
	if m.FinishWork != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.FinishWork))
		i--
		dAtA[i] = 0x28
	}
	if m.BeginWork != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BeginWork))
		i--
		dAtA[i] = 0x20
	}
	if m.Taskid != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Taskid))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Worker) > 0 {
		i -= len(m.Worker)
		copy(dAtA[i:], m.Worker)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Worker)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWorkResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWorkResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWorkResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgFinishTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFinishTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFinishTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FinishTask != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.FinishTask))
		i--
		dAtA[i] = 0x18
	}
	if m.Taskid != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Taskid))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgFinishTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFinishTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFinishTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TaskId != 0 {
		n += 1 + sovTx(uint64(m.TaskId))
	}
	l = len(m.Assigner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovTx(uint64(m.State))
	}
	if m.BeginTask != 0 {
		n += 1 + sovTx(uint64(m.BeginTask))
	}
	if m.Deadline != 0 {
		n += 1 + sovTx(uint64(m.Deadline))
	}
	if m.FinishTask != 0 {
		n += 1 + sovTx(uint64(m.FinishTask))
	}
	l = len(m.Wager)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgUpdateTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	if m.TaskId != 0 {
		n += 1 + sovTx(uint64(m.TaskId))
	}
	l = len(m.Assigner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovTx(uint64(m.State))
	}
	if m.BeginTask != 0 {
		n += 1 + sovTx(uint64(m.BeginTask))
	}
	if m.Deadline != 0 {
		n += 1 + sovTx(uint64(m.Deadline))
	}
	if m.FinishTask != 0 {
		n += 1 + sovTx(uint64(m.FinishTask))
	}
	l = len(m.Wager)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgDeleteTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateActivity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Worker)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BeginWork != 0 {
		n += 1 + sovTx(uint64(m.BeginWork))
	}
	if m.FinishWork != 0 {
		n += 1 + sovTx(uint64(m.FinishWork))
	}
	if m.WorkingTime != 0 {
		n += 1 + sovTx(uint64(m.WorkingTime))
	}
	if m.TaskId != 0 {
		n += 1 + sovTx(uint64(m.TaskId))
	}
	return n
}

func (m *MsgCreateActivityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgUpdateActivity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	l = len(m.Worker)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BeginWork != 0 {
		n += 1 + sovTx(uint64(m.BeginWork))
	}
	if m.FinishWork != 0 {
		n += 1 + sovTx(uint64(m.FinishWork))
	}
	if m.WorkingTime != 0 {
		n += 1 + sovTx(uint64(m.WorkingTime))
	}
	if m.TaskId != 0 {
		n += 1 + sovTx(uint64(m.TaskId))
	}
	return n
}

func (m *MsgUpdateActivityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteActivity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgDeleteActivityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBeginTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Taskid != 0 {
		n += 1 + sovTx(uint64(m.Taskid))
	}
	l = len(m.Assigner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BeginTask != 0 {
		n += 1 + sovTx(uint64(m.BeginTask))
	}
	if m.Deadline != 0 {
		n += 1 + sovTx(uint64(m.Deadline))
	}
	l = len(m.Wager)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgBeginTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgWork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Worker)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Taskid != 0 {
		n += 1 + sovTx(uint64(m.Taskid))
	}
	if m.BeginWork != 0 {
		n += 1 + sovTx(uint64(m.BeginWork))
	}
	if m.FinishWork != 0 {
		n += 1 + sovTx(uint64(m.FinishWork))
	}
	if m.WorkingTime != 0 {
		n += 1 + sovTx(uint64(m.WorkingTime))
	}
	return n
}

func (m *MsgWorkResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgFinishTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Taskid != 0 {
		n += 1 + sovTx(uint64(m.Taskid))
	}
	if m.FinishTask != 0 {
		n += 1 + sovTx(uint64(m.FinishTask))
	}
	return n
}

func (m *MsgFinishTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assigner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assigner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginTask", wireType)
			}
			m.BeginTask = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeginTask |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deadline", wireType)
			}
			m.Deadline = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Deadline |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishTask", wireType)
			}
			m.FinishTask = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinishTask |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wager", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Wager = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assigner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assigner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginTask", wireType)
			}
			m.BeginTask = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeginTask |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deadline", wireType)
			}
			m.Deadline = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Deadline |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishTask", wireType)
			}
			m.FinishTask = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinishTask |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wager", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Wager = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateActivity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateActivity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateActivity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Worker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Worker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginWork", wireType)
			}
			m.BeginWork = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeginWork |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishWork", wireType)
			}
			m.FinishWork = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinishWork |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkingTime", wireType)
			}
			m.WorkingTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkingTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateActivityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateActivityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateActivityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateActivity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateActivity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateActivity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Worker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Worker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginWork", wireType)
			}
			m.BeginWork = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeginWork |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishWork", wireType)
			}
			m.FinishWork = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinishWork |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkingTime", wireType)
			}
			m.WorkingTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkingTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateActivityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateActivityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateActivityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteActivity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteActivity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteActivity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteActivityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteActivityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteActivityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBeginTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBeginTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBeginTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Taskid", wireType)
			}
			m.Taskid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Taskid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assigner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assigner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginTask", wireType)
			}
			m.BeginTask = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeginTask |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deadline", wireType)
			}
			m.Deadline = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Deadline |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wager", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Wager = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBeginTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBeginTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBeginTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWork) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWork: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWork: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Worker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Worker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Taskid", wireType)
			}
			m.Taskid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Taskid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginWork", wireType)
			}
			m.BeginWork = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeginWork |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishWork", wireType)
			}
			m.FinishWork = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinishWork |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkingTime", wireType)
			}
			m.WorkingTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkingTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWorkResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWorkResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWorkResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFinishTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFinishTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFinishTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Taskid", wireType)
			}
			m.Taskid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Taskid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishTask", wireType)
			}
			m.FinishTask = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinishTask |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFinishTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFinishTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFinishTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)

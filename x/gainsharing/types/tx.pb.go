// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vita/gainsharing/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgUpdateParams is the Msg/UpdateParams request type.
type MsgUpdateParams struct {
	// authority is the address that controls the module (defaults to x/gov unless overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0a8e4198a744498, []int{0}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0a8e4198a744498, []int{1}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

type MsgCreateMechanism struct {
	Creator       string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Metrics       string `protobuf:"bytes,2,opt,name=metrics,proto3" json:"metrics,omitempty"`
	Coefficients  string `protobuf:"bytes,3,opt,name=coefficients,proto3" json:"coefficients,omitempty"`
	ConvergeLimit string `protobuf:"bytes,4,opt,name=convergeLimit,proto3" json:"convergeLimit,omitempty"`
	Slope         string `protobuf:"bytes,5,opt,name=slope,proto3" json:"slope,omitempty"`
}

func (m *MsgCreateMechanism) Reset()         { *m = MsgCreateMechanism{} }
func (m *MsgCreateMechanism) String() string { return proto.CompactTextString(m) }
func (*MsgCreateMechanism) ProtoMessage()    {}
func (*MsgCreateMechanism) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0a8e4198a744498, []int{2}
}
func (m *MsgCreateMechanism) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateMechanism) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateMechanism.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateMechanism) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateMechanism.Merge(m, src)
}
func (m *MsgCreateMechanism) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateMechanism) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateMechanism.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateMechanism proto.InternalMessageInfo

func (m *MsgCreateMechanism) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateMechanism) GetMetrics() string {
	if m != nil {
		return m.Metrics
	}
	return ""
}

func (m *MsgCreateMechanism) GetCoefficients() string {
	if m != nil {
		return m.Coefficients
	}
	return ""
}

func (m *MsgCreateMechanism) GetConvergeLimit() string {
	if m != nil {
		return m.ConvergeLimit
	}
	return ""
}

func (m *MsgCreateMechanism) GetSlope() string {
	if m != nil {
		return m.Slope
	}
	return ""
}

type MsgCreateMechanismResponse struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgCreateMechanismResponse) Reset()         { *m = MsgCreateMechanismResponse{} }
func (m *MsgCreateMechanismResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateMechanismResponse) ProtoMessage()    {}
func (*MsgCreateMechanismResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0a8e4198a744498, []int{3}
}
func (m *MsgCreateMechanismResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateMechanismResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateMechanismResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateMechanismResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateMechanismResponse.Merge(m, src)
}
func (m *MsgCreateMechanismResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateMechanismResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateMechanismResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateMechanismResponse proto.InternalMessageInfo

func (m *MsgCreateMechanismResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgUpdateMechanism struct {
	Creator       string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id            uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Metrics       string `protobuf:"bytes,3,opt,name=metrics,proto3" json:"metrics,omitempty"`
	Coefficients  string `protobuf:"bytes,4,opt,name=coefficients,proto3" json:"coefficients,omitempty"`
	ConvergeLimit string `protobuf:"bytes,5,opt,name=convergeLimit,proto3" json:"convergeLimit,omitempty"`
	Slope         string `protobuf:"bytes,6,opt,name=slope,proto3" json:"slope,omitempty"`
}

func (m *MsgUpdateMechanism) Reset()         { *m = MsgUpdateMechanism{} }
func (m *MsgUpdateMechanism) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateMechanism) ProtoMessage()    {}
func (*MsgUpdateMechanism) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0a8e4198a744498, []int{4}
}
func (m *MsgUpdateMechanism) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateMechanism) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateMechanism.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateMechanism) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateMechanism.Merge(m, src)
}
func (m *MsgUpdateMechanism) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateMechanism) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateMechanism.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateMechanism proto.InternalMessageInfo

func (m *MsgUpdateMechanism) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateMechanism) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MsgUpdateMechanism) GetMetrics() string {
	if m != nil {
		return m.Metrics
	}
	return ""
}

func (m *MsgUpdateMechanism) GetCoefficients() string {
	if m != nil {
		return m.Coefficients
	}
	return ""
}

func (m *MsgUpdateMechanism) GetConvergeLimit() string {
	if m != nil {
		return m.ConvergeLimit
	}
	return ""
}

func (m *MsgUpdateMechanism) GetSlope() string {
	if m != nil {
		return m.Slope
	}
	return ""
}

type MsgUpdateMechanismResponse struct {
}

func (m *MsgUpdateMechanismResponse) Reset()         { *m = MsgUpdateMechanismResponse{} }
func (m *MsgUpdateMechanismResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateMechanismResponse) ProtoMessage()    {}
func (*MsgUpdateMechanismResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0a8e4198a744498, []int{5}
}
func (m *MsgUpdateMechanismResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateMechanismResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateMechanismResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateMechanismResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateMechanismResponse.Merge(m, src)
}
func (m *MsgUpdateMechanismResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateMechanismResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateMechanismResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateMechanismResponse proto.InternalMessageInfo

type MsgDeleteMechanism struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id      uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgDeleteMechanism) Reset()         { *m = MsgDeleteMechanism{} }
func (m *MsgDeleteMechanism) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteMechanism) ProtoMessage()    {}
func (*MsgDeleteMechanism) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0a8e4198a744498, []int{6}
}
func (m *MsgDeleteMechanism) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteMechanism) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteMechanism.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteMechanism) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteMechanism.Merge(m, src)
}
func (m *MsgDeleteMechanism) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteMechanism) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteMechanism.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteMechanism proto.InternalMessageInfo

func (m *MsgDeleteMechanism) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgDeleteMechanism) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgDeleteMechanismResponse struct {
}

func (m *MsgDeleteMechanismResponse) Reset()         { *m = MsgDeleteMechanismResponse{} }
func (m *MsgDeleteMechanismResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteMechanismResponse) ProtoMessage()    {}
func (*MsgDeleteMechanismResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0a8e4198a744498, []int{7}
}
func (m *MsgDeleteMechanismResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteMechanismResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteMechanismResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteMechanismResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteMechanismResponse.Merge(m, src)
}
func (m *MsgDeleteMechanismResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteMechanismResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteMechanismResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteMechanismResponse proto.InternalMessageInfo

type MsgCreatePerformance struct {
	Creator string     `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Mid     uint64     `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty"`
	Tid     string     `protobuf:"bytes,3,opt,name=tid,proto3" json:"tid,omitempty"`
	Wager   types.Coin `protobuf:"bytes,4,opt,name=wager,proto3" json:"wager"`
	Reward  types.Coin `protobuf:"bytes,5,opt,name=reward,proto3" json:"reward"`
	Earner  string     `protobuf:"bytes,6,opt,name=earner,proto3" json:"earner,omitempty"`
}

func (m *MsgCreatePerformance) Reset()         { *m = MsgCreatePerformance{} }
func (m *MsgCreatePerformance) String() string { return proto.CompactTextString(m) }
func (*MsgCreatePerformance) ProtoMessage()    {}
func (*MsgCreatePerformance) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0a8e4198a744498, []int{8}
}
func (m *MsgCreatePerformance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreatePerformance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreatePerformance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreatePerformance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreatePerformance.Merge(m, src)
}
func (m *MsgCreatePerformance) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreatePerformance) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreatePerformance.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreatePerformance proto.InternalMessageInfo

func (m *MsgCreatePerformance) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreatePerformance) GetMid() uint64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *MsgCreatePerformance) GetTid() string {
	if m != nil {
		return m.Tid
	}
	return ""
}

func (m *MsgCreatePerformance) GetWager() types.Coin {
	if m != nil {
		return m.Wager
	}
	return types.Coin{}
}

func (m *MsgCreatePerformance) GetReward() types.Coin {
	if m != nil {
		return m.Reward
	}
	return types.Coin{}
}

func (m *MsgCreatePerformance) GetEarner() string {
	if m != nil {
		return m.Earner
	}
	return ""
}

type MsgCreatePerformanceResponse struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgCreatePerformanceResponse) Reset()         { *m = MsgCreatePerformanceResponse{} }
func (m *MsgCreatePerformanceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreatePerformanceResponse) ProtoMessage()    {}
func (*MsgCreatePerformanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0a8e4198a744498, []int{9}
}
func (m *MsgCreatePerformanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreatePerformanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreatePerformanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreatePerformanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreatePerformanceResponse.Merge(m, src)
}
func (m *MsgCreatePerformanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreatePerformanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreatePerformanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreatePerformanceResponse proto.InternalMessageInfo

func (m *MsgCreatePerformanceResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgUpdatePerformance struct {
	Creator string     `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id      uint64     `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Mid     uint64     `protobuf:"varint,3,opt,name=mid,proto3" json:"mid,omitempty"`
	Tid     string     `protobuf:"bytes,4,opt,name=tid,proto3" json:"tid,omitempty"`
	Wager   types.Coin `protobuf:"bytes,5,opt,name=wager,proto3" json:"wager"`
	Reward  types.Coin `protobuf:"bytes,6,opt,name=reward,proto3" json:"reward"`
	Earner  string     `protobuf:"bytes,7,opt,name=earner,proto3" json:"earner,omitempty"`
}

func (m *MsgUpdatePerformance) Reset()         { *m = MsgUpdatePerformance{} }
func (m *MsgUpdatePerformance) String() string { return proto.CompactTextString(m) }
func (*MsgUpdatePerformance) ProtoMessage()    {}
func (*MsgUpdatePerformance) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0a8e4198a744498, []int{10}
}
func (m *MsgUpdatePerformance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdatePerformance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdatePerformance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdatePerformance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdatePerformance.Merge(m, src)
}
func (m *MsgUpdatePerformance) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdatePerformance) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdatePerformance.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdatePerformance proto.InternalMessageInfo

func (m *MsgUpdatePerformance) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdatePerformance) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MsgUpdatePerformance) GetMid() uint64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *MsgUpdatePerformance) GetTid() string {
	if m != nil {
		return m.Tid
	}
	return ""
}

func (m *MsgUpdatePerformance) GetWager() types.Coin {
	if m != nil {
		return m.Wager
	}
	return types.Coin{}
}

func (m *MsgUpdatePerformance) GetReward() types.Coin {
	if m != nil {
		return m.Reward
	}
	return types.Coin{}
}

func (m *MsgUpdatePerformance) GetEarner() string {
	if m != nil {
		return m.Earner
	}
	return ""
}

type MsgUpdatePerformanceResponse struct {
}

func (m *MsgUpdatePerformanceResponse) Reset()         { *m = MsgUpdatePerformanceResponse{} }
func (m *MsgUpdatePerformanceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdatePerformanceResponse) ProtoMessage()    {}
func (*MsgUpdatePerformanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0a8e4198a744498, []int{11}
}
func (m *MsgUpdatePerformanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdatePerformanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdatePerformanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdatePerformanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdatePerformanceResponse.Merge(m, src)
}
func (m *MsgUpdatePerformanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdatePerformanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdatePerformanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdatePerformanceResponse proto.InternalMessageInfo

type MsgDeletePerformance struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id      uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgDeletePerformance) Reset()         { *m = MsgDeletePerformance{} }
func (m *MsgDeletePerformance) String() string { return proto.CompactTextString(m) }
func (*MsgDeletePerformance) ProtoMessage()    {}
func (*MsgDeletePerformance) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0a8e4198a744498, []int{12}
}
func (m *MsgDeletePerformance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeletePerformance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeletePerformance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeletePerformance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeletePerformance.Merge(m, src)
}
func (m *MsgDeletePerformance) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeletePerformance) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeletePerformance.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeletePerformance proto.InternalMessageInfo

func (m *MsgDeletePerformance) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgDeletePerformance) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgDeletePerformanceResponse struct {
}

func (m *MsgDeletePerformanceResponse) Reset()         { *m = MsgDeletePerformanceResponse{} }
func (m *MsgDeletePerformanceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeletePerformanceResponse) ProtoMessage()    {}
func (*MsgDeletePerformanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0a8e4198a744498, []int{13}
}
func (m *MsgDeletePerformanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeletePerformanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeletePerformanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeletePerformanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeletePerformanceResponse.Merge(m, src)
}
func (m *MsgDeletePerformanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeletePerformanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeletePerformanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeletePerformanceResponse proto.InternalMessageInfo

type MsgCalculatePerformance struct {
	Creator string     `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Mid     uint64     `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty"`
	Wager   types.Coin `protobuf:"bytes,3,opt,name=wager,proto3" json:"wager"`
	Earner  string     `protobuf:"bytes,4,opt,name=earner,proto3" json:"earner,omitempty"`
	Taskid  uint64     `protobuf:"varint,5,opt,name=taskid,proto3" json:"taskid,omitempty"`
}

func (m *MsgCalculatePerformance) Reset()         { *m = MsgCalculatePerformance{} }
func (m *MsgCalculatePerformance) String() string { return proto.CompactTextString(m) }
func (*MsgCalculatePerformance) ProtoMessage()    {}
func (*MsgCalculatePerformance) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0a8e4198a744498, []int{14}
}
func (m *MsgCalculatePerformance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCalculatePerformance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCalculatePerformance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCalculatePerformance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCalculatePerformance.Merge(m, src)
}
func (m *MsgCalculatePerformance) XXX_Size() int {
	return m.Size()
}
func (m *MsgCalculatePerformance) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCalculatePerformance.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCalculatePerformance proto.InternalMessageInfo

func (m *MsgCalculatePerformance) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCalculatePerformance) GetMid() uint64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *MsgCalculatePerformance) GetWager() types.Coin {
	if m != nil {
		return m.Wager
	}
	return types.Coin{}
}

func (m *MsgCalculatePerformance) GetEarner() string {
	if m != nil {
		return m.Earner
	}
	return ""
}

func (m *MsgCalculatePerformance) GetTaskid() uint64 {
	if m != nil {
		return m.Taskid
	}
	return 0
}

type MsgCalculatePerformanceResponse struct {
	Id     int32      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Reward types.Coin `protobuf:"bytes,2,opt,name=reward,proto3" json:"reward"`
}

func (m *MsgCalculatePerformanceResponse) Reset()         { *m = MsgCalculatePerformanceResponse{} }
func (m *MsgCalculatePerformanceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCalculatePerformanceResponse) ProtoMessage()    {}
func (*MsgCalculatePerformanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0a8e4198a744498, []int{15}
}
func (m *MsgCalculatePerformanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCalculatePerformanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCalculatePerformanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCalculatePerformanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCalculatePerformanceResponse.Merge(m, src)
}
func (m *MsgCalculatePerformanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCalculatePerformanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCalculatePerformanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCalculatePerformanceResponse proto.InternalMessageInfo

func (m *MsgCalculatePerformanceResponse) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MsgCalculatePerformanceResponse) GetReward() types.Coin {
	if m != nil {
		return m.Reward
	}
	return types.Coin{}
}

func init() {
	proto.RegisterType((*MsgUpdateParams)(nil), "vita.gainsharing.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "vita.gainsharing.MsgUpdateParamsResponse")
	proto.RegisterType((*MsgCreateMechanism)(nil), "vita.gainsharing.MsgCreateMechanism")
	proto.RegisterType((*MsgCreateMechanismResponse)(nil), "vita.gainsharing.MsgCreateMechanismResponse")
	proto.RegisterType((*MsgUpdateMechanism)(nil), "vita.gainsharing.MsgUpdateMechanism")
	proto.RegisterType((*MsgUpdateMechanismResponse)(nil), "vita.gainsharing.MsgUpdateMechanismResponse")
	proto.RegisterType((*MsgDeleteMechanism)(nil), "vita.gainsharing.MsgDeleteMechanism")
	proto.RegisterType((*MsgDeleteMechanismResponse)(nil), "vita.gainsharing.MsgDeleteMechanismResponse")
	proto.RegisterType((*MsgCreatePerformance)(nil), "vita.gainsharing.MsgCreatePerformance")
	proto.RegisterType((*MsgCreatePerformanceResponse)(nil), "vita.gainsharing.MsgCreatePerformanceResponse")
	proto.RegisterType((*MsgUpdatePerformance)(nil), "vita.gainsharing.MsgUpdatePerformance")
	proto.RegisterType((*MsgUpdatePerformanceResponse)(nil), "vita.gainsharing.MsgUpdatePerformanceResponse")
	proto.RegisterType((*MsgDeletePerformance)(nil), "vita.gainsharing.MsgDeletePerformance")
	proto.RegisterType((*MsgDeletePerformanceResponse)(nil), "vita.gainsharing.MsgDeletePerformanceResponse")
	proto.RegisterType((*MsgCalculatePerformance)(nil), "vita.gainsharing.MsgCalculatePerformance")
	proto.RegisterType((*MsgCalculatePerformanceResponse)(nil), "vita.gainsharing.MsgCalculatePerformanceResponse")
}

func init() { proto.RegisterFile("vita/gainsharing/tx.proto", fileDescriptor_e0a8e4198a744498) }

var fileDescriptor_e0a8e4198a744498 = []byte{
	// 852 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0x4d, 0x8f, 0xdb, 0x44,
	0x18, 0x8e, 0xf3, 0x55, 0x65, 0xba, 0xd0, 0xd6, 0x8a, 0xa8, 0x63, 0x15, 0x77, 0x89, 0x56, 0xab,
	0xb2, 0x2a, 0xb6, 0x12, 0x54, 0x90, 0xca, 0x89, 0x2c, 0xc7, 0x06, 0x55, 0x46, 0x5c, 0x10, 0x12,
	0x9a, 0x75, 0x66, 0xbd, 0x43, 0x63, 0x4f, 0x34, 0x33, 0x4d, 0xbb, 0x37, 0xc4, 0x91, 0x13, 0x3f,
	0x83, 0xe3, 0x1e, 0x10, 0x07, 0x24, 0xae, 0x68, 0x8f, 0x2b, 0x4e, 0x1c, 0x10, 0x42, 0xbb, 0x87,
	0x95, 0xf8, 0x09, 0x9c, 0xd0, 0x7c, 0xd8, 0x49, 0xfc, 0x95, 0x6c, 0x7a, 0x49, 0x3c, 0xf3, 0x3e,
	0x9e, 0xe7, 0x7d, 0x9e, 0x79, 0xe7, 0x1d, 0x83, 0xde, 0x1c, 0x73, 0xe8, 0x85, 0x10, 0xc7, 0xec,
	0x04, 0x52, 0x1c, 0x87, 0x1e, 0x7f, 0xed, 0xce, 0x28, 0xe1, 0xc4, 0xbc, 0x2b, 0x42, 0xee, 0x52,
	0xc8, 0xbe, 0x07, 0x23, 0x1c, 0x13, 0x4f, 0xfe, 0x2a, 0x90, 0x7d, 0x3f, 0x20, 0x2c, 0x22, 0xcc,
	0x8b, 0x58, 0xe8, 0xcd, 0x07, 0xe2, 0x4f, 0x07, 0x7a, 0x2a, 0xf0, 0x8d, 0x1c, 0x79, 0x6a, 0xa0,
	0x43, 0xdd, 0x90, 0x84, 0x44, 0xcd, 0x8b, 0x27, 0x3d, 0xfb, 0x6e, 0x2e, 0x93, 0x19, 0xa4, 0x30,
	0x4a, 0x5e, 0xda, 0xcd, 0x85, 0x23, 0x14, 0x9c, 0xc0, 0x18, 0xb3, 0x48, 0x23, 0xfa, 0xf9, 0x05,
	0x10, 0x3d, 0x26, 0x34, 0x82, 0x71, 0x80, 0x34, 0xc6, 0xd1, 0xe9, 0x1e, 0x41, 0x86, 0xbc, 0xf9,
	0xe0, 0x08, 0x71, 0x38, 0xf0, 0x02, 0x82, 0x63, 0x15, 0xef, 0xff, 0x66, 0x80, 0x3b, 0x63, 0x16,
	0x7e, 0x39, 0x9b, 0x40, 0x8e, 0x9e, 0x4b, 0x7e, 0xf3, 0x23, 0xd0, 0x81, 0x2f, 0xf9, 0x09, 0xa1,
	0x98, 0x9f, 0x5a, 0xc6, 0xae, 0xf1, 0xa8, 0x33, 0xb2, 0xfe, 0xf8, 0xf9, 0x83, 0xae, 0xd6, 0xf4,
	0xe9, 0x64, 0x42, 0x11, 0x63, 0x5f, 0x70, 0x41, 0xe9, 0x2f, 0xa0, 0xe6, 0x27, 0xa0, 0xad, 0x14,
	0x58, 0xf5, 0x5d, 0xe3, 0xd1, 0xed, 0xa1, 0xe5, 0x66, 0x0d, 0x75, 0x15, 0xc3, 0xa8, 0x73, 0xfe,
	0xf7, 0xc3, 0xda, 0x4f, 0xd7, 0x67, 0x07, 0x86, 0xaf, 0x5f, 0x79, 0xfa, 0xe4, 0xfb, 0xeb, 0xb3,
	0x83, 0xc5, 0x62, 0x3f, 0x5c, 0x9f, 0x1d, 0x28, 0x7d, 0xaf, 0x57, 0x14, 0x66, 0x72, 0xed, 0xf7,
	0xc0, 0xfd, 0xcc, 0x94, 0x8f, 0xd8, 0x8c, 0xc4, 0x0c, 0xf5, 0x7f, 0x31, 0x80, 0x39, 0x66, 0xe1,
	0x21, 0x45, 0x90, 0xa3, 0x71, 0xe2, 0x9d, 0x69, 0x81, 0x5b, 0x81, 0x98, 0x22, 0x54, 0x69, 0xf3,
	0x93, 0xa1, 0x88, 0x44, 0x88, 0x53, 0x1c, 0x28, 0x01, 0x1d, 0x3f, 0x19, 0x9a, 0x7d, 0xb0, 0x13,
	0x10, 0x74, 0x7c, 0x8c, 0x03, 0x8c, 0x62, 0xce, 0xac, 0x86, 0x0c, 0xaf, 0xcc, 0x99, 0x7b, 0xe0,
	0xad, 0x80, 0xc4, 0x73, 0x44, 0x43, 0xf4, 0x0c, 0x47, 0x98, 0x5b, 0x4d, 0x09, 0x5a, 0x9d, 0x34,
	0xbb, 0xa0, 0xc5, 0xa6, 0x64, 0x86, 0xac, 0x96, 0x8c, 0xaa, 0xc1, 0xd3, 0x1d, 0x21, 0x3e, 0xc9,
	0xa3, 0xff, 0x18, 0xd8, 0xf9, 0xbc, 0x13, 0x59, 0xe6, 0xdb, 0xa0, 0x8e, 0x27, 0x32, 0xf5, 0xa6,
	0x5f, 0xc7, 0x93, 0xfe, 0xef, 0x4a, 0xa6, 0xb2, 0x60, 0x13, 0x99, 0x6a, 0x81, 0x7a, 0xb2, 0xc0,
	0xb2, 0xec, 0x46, 0xb5, 0xec, 0xe6, 0x26, 0xb2, 0x5b, 0x95, 0xb2, 0xdb, 0xe5, 0xb2, 0x1f, 0x48,
	0xd9, 0x19, 0x1d, 0xe9, 0x6e, 0x3e, 0x93, 0x2a, 0x3f, 0x43, 0x53, 0xb4, 0x95, 0xca, 0x42, 0xae,
	0xcc, 0x6a, 0x29, 0xd7, 0xbf, 0x06, 0xe8, 0xa6, 0x3b, 0xf0, 0x7c, 0x71, 0xa6, 0x2a, 0xe8, 0xee,
	0x82, 0x46, 0x94, 0xf2, 0x89, 0x47, 0x31, 0xc3, 0xf1, 0x44, 0x5b, 0x2a, 0x1e, 0xcd, 0x27, 0xa0,
	0xf5, 0x0a, 0x86, 0x88, 0x4a, 0x1f, 0x6f, 0x0f, 0x7b, 0xae, 0x3e, 0x50, 0xe2, 0x6c, 0xba, 0xfa,
	0x6c, 0xba, 0x87, 0x04, 0xc7, 0xa3, 0xa6, 0x38, 0x1f, 0xbe, 0x42, 0x9b, 0x1f, 0x83, 0x36, 0x45,
	0xaf, 0x20, 0x9d, 0x48, 0x6b, 0x37, 0x78, 0x4f, 0xc3, 0xcd, 0x77, 0x40, 0x1b, 0x41, 0x1a, 0x23,
	0xaa, 0x5d, 0xd7, 0xa3, 0x8c, 0x15, 0x2e, 0x78, 0x50, 0xa4, 0xb5, 0xb4, 0xde, 0xfe, 0x53, 0xe6,
	0xe8, 0x23, 0xb7, 0x91, 0x39, 0xd9, 0x8a, 0xd3, 0x66, 0x35, 0x72, 0x66, 0x35, 0x0b, 0xcc, 0x6a,
	0x6d, 0x69, 0x56, 0x7b, 0x5b, 0xb3, 0x6e, 0x55, 0x98, 0xe5, 0x48, 0xb3, 0x72, 0xda, 0xd3, 0xca,
	0xf9, 0x5c, 0x7a, 0xa3, 0xea, 0x6a, 0x2b, 0x6f, 0x0a, 0xf9, 0x72, 0xeb, 0xa5, 0x7c, 0xbf, 0x1a,
	0xb2, 0xff, 0x1d, 0xc2, 0x69, 0xf0, 0x72, 0xfa, 0x06, 0xc5, 0x9a, 0xba, 0xdd, 0xb8, 0x91, 0xdb,
	0x0b, 0xd3, 0x9a, 0xcb, 0xa6, 0x89, 0x79, 0x0e, 0xd9, 0x0b, 0xac, 0x4a, 0xb6, 0xe9, 0xeb, 0x51,
	0x46, 0xdc, 0xb7, 0xe0, 0x61, 0x49, 0xee, 0x05, 0xc5, 0xd7, 0x92, 0x95, 0xb3, 0xd8, 0xde, 0xfa,
	0x8d, 0xb6, 0x77, 0xf8, 0x57, 0x1b, 0x34, 0xc6, 0x2c, 0x34, 0xbf, 0x06, 0x3b, 0x2b, 0x77, 0xdd,
	0x7b, 0xf9, 0x3b, 0x2a, 0x73, 0x9f, 0xd8, 0xef, 0xaf, 0x85, 0xa4, 0xe9, 0x22, 0x70, 0x27, 0x7b,
	0xdd, 0xec, 0x15, 0xbe, 0x9d, 0x41, 0xd9, 0x8f, 0x37, 0x41, 0x2d, 0xd3, 0x64, 0xdb, 0xfd, 0x5e,
	0x45, 0x92, 0xeb, 0x68, 0x4a, 0x5a, 0xae, 0xa0, 0xc9, 0xf6, 0xdb, 0x62, 0x9a, 0x0c, 0xaa, 0x84,
	0xa6, 0xa4, 0xdb, 0x9a, 0x2f, 0xc0, 0xbd, 0x7c, 0xa7, 0xdd, 0xaf, 0x30, 0x64, 0x09, 0x67, 0xbb,
	0x9b, 0xe1, 0x96, 0xc9, 0xf2, 0x9d, 0x6b, 0xbf, 0x6a, 0x87, 0xd7, 0x92, 0x95, 0x76, 0x03, 0x41,
	0x96, 0x6f, 0x05, 0xfb, 0x15, 0xe6, 0xac, 0x27, 0x2b, 0x6d, 0x05, 0x26, 0x07, 0xdd, 0xc2, 0x36,
	0x50, 0x5c, 0xbe, 0x45, 0x50, 0x7b, 0xb0, 0x31, 0x34, 0x61, 0xb5, 0x5b, 0xdf, 0x89, 0xaf, 0xb8,
	0xd1, 0xf0, 0xfc, 0xd2, 0x31, 0x2e, 0x2e, 0x1d, 0xe3, 0x9f, 0x4b, 0xc7, 0xf8, 0xf1, 0xca, 0xa9,
	0x5d, 0x5c, 0x39, 0xb5, 0x3f, 0xaf, 0x9c, 0xda, 0x57, 0x56, 0xc1, 0x47, 0x1c, 0x3f, 0x9d, 0x21,
	0x76, 0xd4, 0x96, 0x5f, 0xa0, 0x1f, 0xfe, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x2b, 0x02, 0xb3, 0x7a,
	0x92, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	CreateMechanism(ctx context.Context, in *MsgCreateMechanism, opts ...grpc.CallOption) (*MsgCreateMechanismResponse, error)
	UpdateMechanism(ctx context.Context, in *MsgUpdateMechanism, opts ...grpc.CallOption) (*MsgUpdateMechanismResponse, error)
	DeleteMechanism(ctx context.Context, in *MsgDeleteMechanism, opts ...grpc.CallOption) (*MsgDeleteMechanismResponse, error)
	CreatePerformance(ctx context.Context, in *MsgCreatePerformance, opts ...grpc.CallOption) (*MsgCreatePerformanceResponse, error)
	UpdatePerformance(ctx context.Context, in *MsgUpdatePerformance, opts ...grpc.CallOption) (*MsgUpdatePerformanceResponse, error)
	DeletePerformance(ctx context.Context, in *MsgDeletePerformance, opts ...grpc.CallOption) (*MsgDeletePerformanceResponse, error)
	CalculatePerformance(ctx context.Context, in *MsgCalculatePerformance, opts ...grpc.CallOption) (*MsgCalculatePerformanceResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/vita.gainsharing.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateMechanism(ctx context.Context, in *MsgCreateMechanism, opts ...grpc.CallOption) (*MsgCreateMechanismResponse, error) {
	out := new(MsgCreateMechanismResponse)
	err := c.cc.Invoke(ctx, "/vita.gainsharing.Msg/CreateMechanism", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateMechanism(ctx context.Context, in *MsgUpdateMechanism, opts ...grpc.CallOption) (*MsgUpdateMechanismResponse, error) {
	out := new(MsgUpdateMechanismResponse)
	err := c.cc.Invoke(ctx, "/vita.gainsharing.Msg/UpdateMechanism", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteMechanism(ctx context.Context, in *MsgDeleteMechanism, opts ...grpc.CallOption) (*MsgDeleteMechanismResponse, error) {
	out := new(MsgDeleteMechanismResponse)
	err := c.cc.Invoke(ctx, "/vita.gainsharing.Msg/DeleteMechanism", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreatePerformance(ctx context.Context, in *MsgCreatePerformance, opts ...grpc.CallOption) (*MsgCreatePerformanceResponse, error) {
	out := new(MsgCreatePerformanceResponse)
	err := c.cc.Invoke(ctx, "/vita.gainsharing.Msg/CreatePerformance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdatePerformance(ctx context.Context, in *MsgUpdatePerformance, opts ...grpc.CallOption) (*MsgUpdatePerformanceResponse, error) {
	out := new(MsgUpdatePerformanceResponse)
	err := c.cc.Invoke(ctx, "/vita.gainsharing.Msg/UpdatePerformance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeletePerformance(ctx context.Context, in *MsgDeletePerformance, opts ...grpc.CallOption) (*MsgDeletePerformanceResponse, error) {
	out := new(MsgDeletePerformanceResponse)
	err := c.cc.Invoke(ctx, "/vita.gainsharing.Msg/DeletePerformance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CalculatePerformance(ctx context.Context, in *MsgCalculatePerformance, opts ...grpc.CallOption) (*MsgCalculatePerformanceResponse, error) {
	out := new(MsgCalculatePerformanceResponse)
	err := c.cc.Invoke(ctx, "/vita.gainsharing.Msg/CalculatePerformance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	CreateMechanism(context.Context, *MsgCreateMechanism) (*MsgCreateMechanismResponse, error)
	UpdateMechanism(context.Context, *MsgUpdateMechanism) (*MsgUpdateMechanismResponse, error)
	DeleteMechanism(context.Context, *MsgDeleteMechanism) (*MsgDeleteMechanismResponse, error)
	CreatePerformance(context.Context, *MsgCreatePerformance) (*MsgCreatePerformanceResponse, error)
	UpdatePerformance(context.Context, *MsgUpdatePerformance) (*MsgUpdatePerformanceResponse, error)
	DeletePerformance(context.Context, *MsgDeletePerformance) (*MsgDeletePerformanceResponse, error)
	CalculatePerformance(context.Context, *MsgCalculatePerformance) (*MsgCalculatePerformanceResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (*UnimplementedMsgServer) CreateMechanism(ctx context.Context, req *MsgCreateMechanism) (*MsgCreateMechanismResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMechanism not implemented")
}
func (*UnimplementedMsgServer) UpdateMechanism(ctx context.Context, req *MsgUpdateMechanism) (*MsgUpdateMechanismResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMechanism not implemented")
}
func (*UnimplementedMsgServer) DeleteMechanism(ctx context.Context, req *MsgDeleteMechanism) (*MsgDeleteMechanismResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMechanism not implemented")
}
func (*UnimplementedMsgServer) CreatePerformance(ctx context.Context, req *MsgCreatePerformance) (*MsgCreatePerformanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePerformance not implemented")
}
func (*UnimplementedMsgServer) UpdatePerformance(ctx context.Context, req *MsgUpdatePerformance) (*MsgUpdatePerformanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePerformance not implemented")
}
func (*UnimplementedMsgServer) DeletePerformance(ctx context.Context, req *MsgDeletePerformance) (*MsgDeletePerformanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePerformance not implemented")
}
func (*UnimplementedMsgServer) CalculatePerformance(ctx context.Context, req *MsgCalculatePerformance) (*MsgCalculatePerformanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculatePerformance not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vita.gainsharing.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateMechanism_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateMechanism)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateMechanism(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vita.gainsharing.Msg/CreateMechanism",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateMechanism(ctx, req.(*MsgCreateMechanism))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateMechanism_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateMechanism)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateMechanism(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vita.gainsharing.Msg/UpdateMechanism",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateMechanism(ctx, req.(*MsgUpdateMechanism))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteMechanism_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteMechanism)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteMechanism(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vita.gainsharing.Msg/DeleteMechanism",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteMechanism(ctx, req.(*MsgDeleteMechanism))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreatePerformance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreatePerformance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreatePerformance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vita.gainsharing.Msg/CreatePerformance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreatePerformance(ctx, req.(*MsgCreatePerformance))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdatePerformance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdatePerformance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdatePerformance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vita.gainsharing.Msg/UpdatePerformance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdatePerformance(ctx, req.(*MsgUpdatePerformance))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeletePerformance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeletePerformance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeletePerformance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vita.gainsharing.Msg/DeletePerformance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeletePerformance(ctx, req.(*MsgDeletePerformance))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CalculatePerformance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCalculatePerformance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CalculatePerformance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vita.gainsharing.Msg/CalculatePerformance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CalculatePerformance(ctx, req.(*MsgCalculatePerformance))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vita.gainsharing.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "CreateMechanism",
			Handler:    _Msg_CreateMechanism_Handler,
		},
		{
			MethodName: "UpdateMechanism",
			Handler:    _Msg_UpdateMechanism_Handler,
		},
		{
			MethodName: "DeleteMechanism",
			Handler:    _Msg_DeleteMechanism_Handler,
		},
		{
			MethodName: "CreatePerformance",
			Handler:    _Msg_CreatePerformance_Handler,
		},
		{
			MethodName: "UpdatePerformance",
			Handler:    _Msg_UpdatePerformance_Handler,
		},
		{
			MethodName: "DeletePerformance",
			Handler:    _Msg_DeletePerformance_Handler,
		},
		{
			MethodName: "CalculatePerformance",
			Handler:    _Msg_CalculatePerformance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vita/gainsharing/tx.proto",
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateMechanism) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateMechanism) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateMechanism) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Slope) > 0 {
		i -= len(m.Slope)
		copy(dAtA[i:], m.Slope)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Slope)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ConvergeLimit) > 0 {
		i -= len(m.ConvergeLimit)
		copy(dAtA[i:], m.ConvergeLimit)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ConvergeLimit)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Coefficients) > 0 {
		i -= len(m.Coefficients)
		copy(dAtA[i:], m.Coefficients)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Coefficients)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Metrics) > 0 {
		i -= len(m.Metrics)
		copy(dAtA[i:], m.Metrics)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Metrics)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateMechanismResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateMechanismResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateMechanismResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateMechanism) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateMechanism) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateMechanism) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Slope) > 0 {
		i -= len(m.Slope)
		copy(dAtA[i:], m.Slope)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Slope)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ConvergeLimit) > 0 {
		i -= len(m.ConvergeLimit)
		copy(dAtA[i:], m.ConvergeLimit)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ConvergeLimit)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Coefficients) > 0 {
		i -= len(m.Coefficients)
		copy(dAtA[i:], m.Coefficients)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Coefficients)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Metrics) > 0 {
		i -= len(m.Metrics)
		copy(dAtA[i:], m.Metrics)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Metrics)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateMechanismResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateMechanismResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateMechanismResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteMechanism) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteMechanism) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteMechanism) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteMechanismResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteMechanismResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteMechanismResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreatePerformance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreatePerformance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreatePerformance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Earner) > 0 {
		i -= len(m.Earner)
		copy(dAtA[i:], m.Earner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Earner)))
		i--
		dAtA[i] = 0x32
	}
	{
		size, err := m.Reward.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.Wager.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Tid) > 0 {
		i -= len(m.Tid)
		copy(dAtA[i:], m.Tid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Tid)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Mid != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreatePerformanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreatePerformanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreatePerformanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdatePerformance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdatePerformance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdatePerformance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Earner) > 0 {
		i -= len(m.Earner)
		copy(dAtA[i:], m.Earner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Earner)))
		i--
		dAtA[i] = 0x3a
	}
	{
		size, err := m.Reward.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.Wager.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Tid) > 0 {
		i -= len(m.Tid)
		copy(dAtA[i:], m.Tid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Tid)))
		i--
		dAtA[i] = 0x22
	}
	if m.Mid != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x18
	}
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdatePerformanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdatePerformanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdatePerformanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeletePerformance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeletePerformance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeletePerformance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeletePerformanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeletePerformanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeletePerformanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCalculatePerformance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCalculatePerformance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCalculatePerformance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Taskid != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Taskid))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Earner) > 0 {
		i -= len(m.Earner)
		copy(dAtA[i:], m.Earner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Earner)))
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.Wager.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Mid != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCalculatePerformanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCalculatePerformanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCalculatePerformanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Reward.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateMechanism) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Metrics)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Coefficients)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ConvergeLimit)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Slope)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateMechanismResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgUpdateMechanism) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	l = len(m.Metrics)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Coefficients)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ConvergeLimit)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Slope)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateMechanismResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteMechanism) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgDeleteMechanismResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreatePerformance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Mid != 0 {
		n += 1 + sovTx(uint64(m.Mid))
	}
	l = len(m.Tid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Wager.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.Reward.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Earner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreatePerformanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgUpdatePerformance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	if m.Mid != 0 {
		n += 1 + sovTx(uint64(m.Mid))
	}
	l = len(m.Tid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Wager.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.Reward.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Earner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdatePerformanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeletePerformance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgDeletePerformanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCalculatePerformance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Mid != 0 {
		n += 1 + sovTx(uint64(m.Mid))
	}
	l = m.Wager.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Earner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Taskid != 0 {
		n += 1 + sovTx(uint64(m.Taskid))
	}
	return n
}

func (m *MsgCalculatePerformanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	l = m.Reward.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateMechanism) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateMechanism: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateMechanism: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metrics = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coefficients", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coefficients = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvergeLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConvergeLimit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slope", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slope = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateMechanismResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateMechanismResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateMechanismResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateMechanism) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateMechanism: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateMechanism: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metrics = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coefficients", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coefficients = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvergeLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConvergeLimit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slope", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slope = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateMechanismResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateMechanismResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateMechanismResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteMechanism) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteMechanism: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteMechanism: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteMechanismResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteMechanismResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteMechanismResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreatePerformance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreatePerformance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreatePerformance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wager", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Wager.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Reward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Earner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Earner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreatePerformanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreatePerformanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreatePerformanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdatePerformance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdatePerformance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdatePerformance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wager", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Wager.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Reward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Earner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Earner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdatePerformanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdatePerformanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdatePerformanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeletePerformance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeletePerformance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeletePerformance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeletePerformanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeletePerformanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeletePerformanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCalculatePerformance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCalculatePerformance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCalculatePerformance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wager", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Wager.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Earner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Earner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Taskid", wireType)
			}
			m.Taskid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Taskid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCalculatePerformanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCalculatePerformanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCalculatePerformanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Reward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)

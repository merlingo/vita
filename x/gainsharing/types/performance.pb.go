// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vita/gainsharing/performance.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Performance struct {
	Id      uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Mid     uint64     `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty"`
	Tid     string     `protobuf:"bytes,3,opt,name=tid,proto3" json:"tid,omitempty"`
	Wager   types.Coin `protobuf:"bytes,4,opt,name=wager,proto3" json:"wager"`
	Reward  types.Coin `protobuf:"bytes,5,opt,name=reward,proto3" json:"reward"`
	Earner  string     `protobuf:"bytes,6,opt,name=earner,proto3" json:"earner,omitempty"`
	Creator string     `protobuf:"bytes,7,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *Performance) Reset()         { *m = Performance{} }
func (m *Performance) String() string { return proto.CompactTextString(m) }
func (*Performance) ProtoMessage()    {}
func (*Performance) Descriptor() ([]byte, []int) {
	return fileDescriptor_135b19ceb044c749, []int{0}
}
func (m *Performance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Performance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Performance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Performance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Performance.Merge(m, src)
}
func (m *Performance) XXX_Size() int {
	return m.Size()
}
func (m *Performance) XXX_DiscardUnknown() {
	xxx_messageInfo_Performance.DiscardUnknown(m)
}

var xxx_messageInfo_Performance proto.InternalMessageInfo

func (m *Performance) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Performance) GetMid() uint64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *Performance) GetTid() string {
	if m != nil {
		return m.Tid
	}
	return ""
}

func (m *Performance) GetWager() types.Coin {
	if m != nil {
		return m.Wager
	}
	return types.Coin{}
}

func (m *Performance) GetReward() types.Coin {
	if m != nil {
		return m.Reward
	}
	return types.Coin{}
}

func (m *Performance) GetEarner() string {
	if m != nil {
		return m.Earner
	}
	return ""
}

func (m *Performance) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*Performance)(nil), "vita.gainsharing.Performance")
}

func init() {
	proto.RegisterFile("vita/gainsharing/performance.proto", fileDescriptor_135b19ceb044c749)
}

var fileDescriptor_135b19ceb044c749 = []byte{
	// 283 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0xbd, 0x4e, 0xc3, 0x30,
	0x14, 0x85, 0xe3, 0xfe, 0xa4, 0xc2, 0x95, 0x50, 0x65, 0x21, 0x64, 0x3a, 0x98, 0xaa, 0x53, 0x26,
	0x5b, 0x2d, 0x42, 0xec, 0xe5, 0x05, 0x50, 0x46, 0x36, 0x27, 0x31, 0xc1, 0x43, 0xec, 0xe8, 0xc6,
	0x6a, 0xe1, 0x2d, 0x78, 0xac, 0x8e, 0x1d, 0x99, 0x10, 0x4a, 0x5e, 0x04, 0xd9, 0x09, 0x02, 0x36,
	0xb6, 0x73, 0xef, 0xf9, 0xec, 0x73, 0x75, 0xf0, 0x7a, 0xaf, 0x9d, 0x14, 0xa5, 0xd4, 0xa6, 0x79,
	0x96, 0xa0, 0x4d, 0x29, 0x6a, 0x05, 0x4f, 0x16, 0x2a, 0x69, 0x72, 0xc5, 0x6b, 0xb0, 0xce, 0x92,
	0x85, 0x67, 0xf8, 0x2f, 0x66, 0x79, 0x51, 0xda, 0xd2, 0x06, 0x53, 0x78, 0xd5, 0x73, 0x4b, 0x96,
	0xdb, 0xa6, 0xb2, 0x8d, 0xc8, 0x64, 0xa3, 0xc4, 0x7e, 0x93, 0x29, 0x27, 0x37, 0x22, 0xb7, 0xda,
	0xf4, 0xfe, 0xba, 0x43, 0x78, 0xfe, 0xf0, 0xf3, 0x3b, 0x39, 0xc7, 0x23, 0x5d, 0x50, 0xb4, 0x42,
	0xc9, 0x24, 0x1d, 0xe9, 0x82, 0x2c, 0xf0, 0xb8, 0xd2, 0x05, 0x1d, 0x85, 0x85, 0x97, 0x7e, 0xe3,
	0x74, 0x41, 0xc7, 0x2b, 0x94, 0x9c, 0xa5, 0x5e, 0x92, 0x5b, 0x3c, 0x3d, 0xc8, 0x52, 0x01, 0x9d,
	0xac, 0x50, 0x32, 0xdf, 0x5e, 0xf1, 0x3e, 0x93, 0xfb, 0x4c, 0x3e, 0x64, 0xf2, 0x7b, 0xab, 0xcd,
	0x6e, 0x72, 0xfc, 0xb8, 0x8e, 0xd2, 0x9e, 0x26, 0x77, 0x38, 0x06, 0x75, 0x90, 0x50, 0xd0, 0xe9,
	0xff, 0xde, 0x0d, 0x38, 0xb9, 0xc4, 0xb1, 0x92, 0x60, 0x14, 0xd0, 0x38, 0x1c, 0x31, 0x4c, 0x84,
	0xe2, 0x59, 0x0e, 0x4a, 0x3a, 0x0b, 0x74, 0x16, 0x8c, 0xef, 0x71, 0xb7, 0x3d, 0xb6, 0x0c, 0x9d,
	0x5a, 0x86, 0x3e, 0x5b, 0x86, 0xde, 0x3a, 0x16, 0x9d, 0x3a, 0x16, 0xbd, 0x77, 0x2c, 0x7a, 0xa4,
	0xa1, 0xeb, 0x97, 0x3f, 0x6d, 0xbb, 0xd7, 0x5a, 0x35, 0x59, 0x1c, 0x0a, 0xba, 0xf9, 0x0a, 0x00,
	0x00, 0xff, 0xff, 0x37, 0x96, 0x17, 0x30, 0x8e, 0x01, 0x00, 0x00,
}

func (m *Performance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Performance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Performance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintPerformance(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Earner) > 0 {
		i -= len(m.Earner)
		copy(dAtA[i:], m.Earner)
		i = encodeVarintPerformance(dAtA, i, uint64(len(m.Earner)))
		i--
		dAtA[i] = 0x32
	}
	{
		size, err := m.Reward.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPerformance(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.Wager.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPerformance(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Tid) > 0 {
		i -= len(m.Tid)
		copy(dAtA[i:], m.Tid)
		i = encodeVarintPerformance(dAtA, i, uint64(len(m.Tid)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Mid != 0 {
		i = encodeVarintPerformance(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintPerformance(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPerformance(dAtA []byte, offset int, v uint64) int {
	offset -= sovPerformance(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Performance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPerformance(uint64(m.Id))
	}
	if m.Mid != 0 {
		n += 1 + sovPerformance(uint64(m.Mid))
	}
	l = len(m.Tid)
	if l > 0 {
		n += 1 + l + sovPerformance(uint64(l))
	}
	l = m.Wager.Size()
	n += 1 + l + sovPerformance(uint64(l))
	l = m.Reward.Size()
	n += 1 + l + sovPerformance(uint64(l))
	l = len(m.Earner)
	if l > 0 {
		n += 1 + l + sovPerformance(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovPerformance(uint64(l))
	}
	return n
}

func sovPerformance(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPerformance(x uint64) (n int) {
	return sovPerformance(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Performance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPerformance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Performance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Performance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerformance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerformance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerformance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPerformance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPerformance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wager", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerformance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPerformance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPerformance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Wager.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerformance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPerformance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPerformance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Reward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Earner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerformance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPerformance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPerformance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Earner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerformance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPerformance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPerformance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPerformance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPerformance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPerformance(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPerformance
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPerformance
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPerformance
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPerformance
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPerformance
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPerformance
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPerformance        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPerformance          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPerformance = fmt.Errorf("proto: unexpected end of group")
)
